/*
 * generated by Xtext 2.26.0
 */
package org.consensus.homodel.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.consensus.homodel.ide.contentassist.antlr.internal.InternalHOModelParser;
import org.consensus.homodel.services.HOModelGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class HOModelParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HOModelGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HOModelGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSendPartAccess().getAlternatives(), "rule__SendPart__Alternatives");
			builder.put(grammarAccess.getSendPartAccess().getAlternatives_0_8(), "rule__SendPart__Alternatives_0_8");
			builder.put(grammarAccess.getSendPartAccess().getAlternatives_0_10_5(), "rule__SendPart__Alternatives_0_10_5");
			builder.put(grammarAccess.getSendPartAccess().getAlternatives_1_4(), "rule__SendPart__Alternatives_1_4");
			builder.put(grammarAccess.getMessageAccess().getAlternatives(), "rule__Message__Alternatives");
			builder.put(grammarAccess.getMessageAccess().getAlternatives_0_1_1(), "rule__Message__Alternatives_0_1_1");
			builder.put(grammarAccess.getMessageAccess().getAlternatives_0_1_2_1(), "rule__Message__Alternatives_0_1_2_1");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
			builder.put(grammarAccess.getEqualityExpressionAccess().getAlternatives_1_0(), "rule__EqualityExpression__Alternatives_1_0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getAlternatives_1_0(), "rule__RelationalExpression__Alternatives_1_0");
			builder.put(grammarAccess.getSimpleExpressionAccess().getAlternatives_1_0(), "rule__SimpleExpression__Alternatives_1_0");
			builder.put(grammarAccess.getTermAccess().getAlternatives_1_0(), "rule__Term__Alternatives_1_0");
			builder.put(grammarAccess.getFactorAccess().getAlternatives(), "rule__Factor__Alternatives");
			builder.put(grammarAccess.getSIMPLE_CONSTANTAccess().getAlternatives(), "rule__SIMPLE_CONSTANT__Alternatives");
			builder.put(grammarAccess.getINITIAL_CONSTAccess().getAlternatives(), "rule__INITIAL_CONST__Alternatives");
			builder.put(grammarAccess.getCONSTANTAccess().getAlternatives(), "rule__CONSTANT__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getAlgorithmAccess().getGroup(), "rule__Algorithm__Group__0");
			builder.put(grammarAccess.getVarialbeDeclarationAccess().getGroup(), "rule__VarialbeDeclaration__Group__0");
			builder.put(grammarAccess.getVariableDecListAccess().getGroup(), "rule__VariableDecList__Group__0");
			builder.put(grammarAccess.getVariableNameListAccess().getGroup(), "rule__VariableNameList__Group__0");
			builder.put(grammarAccess.getVariableNameListAccess().getGroup_1(), "rule__VariableNameList__Group_1__0");
			builder.put(grammarAccess.getVariableNameListAccess().getGroup_2(), "rule__VariableNameList__Group_2__0");
			builder.put(grammarAccess.getVariableNameListAccess().getGroup_2_2(), "rule__VariableNameList__Group_2_2__0");
			builder.put(grammarAccess.getDomainAccess().getGroup(), "rule__Domain__Group__0");
			builder.put(grammarAccess.getRoundListAccess().getGroup(), "rule__RoundList__Group__0");
			builder.put(grammarAccess.getRoundAccess().getGroup(), "rule__Round__Group__0");
			builder.put(grammarAccess.getSendPartAccess().getGroup_0(), "rule__SendPart__Group_0__0");
			builder.put(grammarAccess.getSendPartAccess().getGroup_0_10(), "rule__SendPart__Group_0_10__0");
			builder.put(grammarAccess.getSendPartAccess().getGroup_1(), "rule__SendPart__Group_1__0");
			builder.put(grammarAccess.getMessageAccess().getGroup_0(), "rule__Message__Group_0__0");
			builder.put(grammarAccess.getMessageAccess().getGroup_0_1(), "rule__Message__Group_0_1__0");
			builder.put(grammarAccess.getMessageAccess().getGroup_0_1_2(), "rule__Message__Group_0_1_2__0");
			builder.put(grammarAccess.getMessageAccess().getGroup_1(), "rule__Message__Group_1__0");
			builder.put(grammarAccess.getInvariantAccess().getGroup(), "rule__Invariant__Group__0");
			builder.put(grammarAccess.getUnivalenceAccess().getGroup(), "rule__Univalence__Group__0");
			builder.put(grammarAccess.getStatementListAccess().getGroup(), "rule__StatementList__Group__0");
			builder.put(grammarAccess.getStatementListAccess().getGroup_1(), "rule__StatementList__Group_1__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_2(), "rule__Statement__Group_2__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_3(), "rule__Statement__Group_3__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_3_5(), "rule__Statement__Group_3_5__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_4(), "rule__Statement__Group_4__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_5(), "rule__Statement__Group_5__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_6(), "rule__Statement__Group_6__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getArrayVariableAccess().getGroup(), "rule__ArrayVariable__Group__0");
			builder.put(grammarAccess.getDecisionAccess().getGroup(), "rule__Decision__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getConjunctiveExpressionAccess().getGroup(), "rule__ConjunctiveExpression__Group__0");
			builder.put(grammarAccess.getConjunctiveExpressionAccess().getGroup_1(), "rule__ConjunctiveExpression__Group_1__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup_1(), "rule__EqualityExpression__Group_1__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
			builder.put(grammarAccess.getSimpleExpressionAccess().getGroup(), "rule__SimpleExpression__Group__0");
			builder.put(grammarAccess.getSimpleExpressionAccess().getGroup_1(), "rule__SimpleExpression__Group_1__0");
			builder.put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
			builder.put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_2(), "rule__Factor__Group_2__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_3(), "rule__Factor__Group_3__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_4(), "rule__Factor__Group_4__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_5(), "rule__Factor__Group_5__0");
			builder.put(grammarAccess.getAlgorithmAccess().getNameAssignment_1(), "rule__Algorithm__NameAssignment_1");
			builder.put(grammarAccess.getAlgorithmAccess().getVariabledeclarationAssignment_3(), "rule__Algorithm__VariabledeclarationAssignment_3");
			builder.put(grammarAccess.getAlgorithmAccess().getDomainAssignment_4(), "rule__Algorithm__DomainAssignment_4");
			builder.put(grammarAccess.getAlgorithmAccess().getRoundlistAssignment_5(), "rule__Algorithm__RoundlistAssignment_5");
			builder.put(grammarAccess.getAlgorithmAccess().getInvAssignment_6(), "rule__Algorithm__InvAssignment_6");
			builder.put(grammarAccess.getAlgorithmAccess().getUvAssignment_7(), "rule__Algorithm__UvAssignment_7");
			builder.put(grammarAccess.getVarialbeDeclarationAccess().getListAssignment_1(), "rule__VarialbeDeclaration__ListAssignment_1");
			builder.put(grammarAccess.getVariableDecListAccess().getTypeAssignment_1(), "rule__VariableDecList__TypeAssignment_1");
			builder.put(grammarAccess.getVariableDecListAccess().getVariablenamelistAssignment_2(), "rule__VariableDecList__VariablenamelistAssignment_2");
			builder.put(grammarAccess.getVariableNameListAccess().getNameAssignment_0(), "rule__VariableNameList__NameAssignment_0");
			builder.put(grammarAccess.getVariableNameListAccess().getValueAssignment_1_1(), "rule__VariableNameList__ValueAssignment_1_1");
			builder.put(grammarAccess.getVariableNameListAccess().getNameAssignment_2_1(), "rule__VariableNameList__NameAssignment_2_1");
			builder.put(grammarAccess.getVariableNameListAccess().getValueAssignment_2_2_1(), "rule__VariableNameList__ValueAssignment_2_2_1");
			builder.put(grammarAccess.getRoundListAccess().getRoundAssignment_0(), "rule__RoundList__RoundAssignment_0");
			builder.put(grammarAccess.getRoundAccess().getSendAssignment_3(), "rule__Round__SendAssignment_3");
			builder.put(grammarAccess.getRoundAccess().getTransitionAssignment_6(), "rule__Round__TransitionAssignment_6");
			builder.put(grammarAccess.getSendPartAccess().getExpAssignment_0_2(), "rule__SendPart__ExpAssignment_0_2");
			builder.put(grammarAccess.getSendPartAccess().getMessage1Assignment_0_6(), "rule__SendPart__Message1Assignment_0_6");
			builder.put(grammarAccess.getSendPartAccess().getMessage2Assignment_0_10_3(), "rule__SendPart__Message2Assignment_0_10_3");
			builder.put(grammarAccess.getSendPartAccess().getMessageAssignment_1_2(), "rule__SendPart__MessageAssignment_1_2");
			builder.put(grammarAccess.getMessageAccess().getMsgAssignment_0_1_1_0(), "rule__Message__MsgAssignment_0_1_1_0");
			builder.put(grammarAccess.getMessageAccess().getMsgAssignment_0_1_2_1_0(), "rule__Message__MsgAssignment_0_1_2_1_0");
			builder.put(grammarAccess.getStatementListAccess().getStatementsAssignment_1_0(), "rule__StatementList__StatementsAssignment_1_0");
			builder.put(grammarAccess.getStatementAccess().getVarAssignment_2_2(), "rule__Statement__VarAssignment_2_2");
			builder.put(grammarAccess.getStatementAccess().getExpAssignment_2_4(), "rule__Statement__ExpAssignment_2_4");
			builder.put(grammarAccess.getStatementAccess().getExpAssignment_2_6(), "rule__Statement__ExpAssignment_2_6");
			builder.put(grammarAccess.getStatementAccess().getStatementAssignment_2_8(), "rule__Statement__StatementAssignment_2_8");
			builder.put(grammarAccess.getStatementAccess().getExpAssignment_3_2(), "rule__Statement__ExpAssignment_3_2");
			builder.put(grammarAccess.getStatementAccess().getStatementAssignment_3_4(), "rule__Statement__StatementAssignment_3_4");
			builder.put(grammarAccess.getStatementAccess().getStatementAssignment_3_5_1(), "rule__Statement__StatementAssignment_3_5_1");
			builder.put(grammarAccess.getAssignmentAccess().getVarAssignment_0(), "rule__Assignment__VarAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getExpAssignment_2(), "rule__Assignment__ExpAssignment_2");
			builder.put(grammarAccess.getNormalVariableAccess().getNameAssignment(), "rule__NormalVariable__NameAssignment");
			builder.put(grammarAccess.getArrayVariableAccess().getNameAssignment_0(), "rule__ArrayVariable__NameAssignment_0");
			builder.put(grammarAccess.getArrayVariableAccess().getExpAssignment_2(), "rule__ArrayVariable__ExpAssignment_2");
			builder.put(grammarAccess.getExpressionAccess().getExpAssignment_0(), "rule__Expression__ExpAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getExpAssignment_1_1(), "rule__Expression__ExpAssignment_1_1");
			builder.put(grammarAccess.getConjunctiveExpressionAccess().getExpAssignment_0(), "rule__ConjunctiveExpression__ExpAssignment_0");
			builder.put(grammarAccess.getConjunctiveExpressionAccess().getExpAssignment_1_1(), "rule__ConjunctiveExpression__ExpAssignment_1_1");
			builder.put(grammarAccess.getEqualityExpressionAccess().getExpAssignment_0(), "rule__EqualityExpression__ExpAssignment_0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getExpAssignment_1_1(), "rule__EqualityExpression__ExpAssignment_1_1");
			builder.put(grammarAccess.getRelationalExpressionAccess().getExpAssignment_0(), "rule__RelationalExpression__ExpAssignment_0");
			builder.put(grammarAccess.getRelationalExpressionAccess().getExpAssignment_1_1(), "rule__RelationalExpression__ExpAssignment_1_1");
			builder.put(grammarAccess.getSimpleExpressionAccess().getTermAssignment_0(), "rule__SimpleExpression__TermAssignment_0");
			builder.put(grammarAccess.getSimpleExpressionAccess().getTermAssignment_1_1(), "rule__SimpleExpression__TermAssignment_1_1");
			builder.put(grammarAccess.getTermAccess().getFactorAssignment_0(), "rule__Term__FactorAssignment_0");
			builder.put(grammarAccess.getTermAccess().getFactorAssignment_1_1(), "rule__Term__FactorAssignment_1_1");
			builder.put(grammarAccess.getFactorAccess().getExpAssignment_4_2(), "rule__Factor__ExpAssignment_4_2");
			builder.put(grammarAccess.getFactorAccess().getVarAssignment_4_5(), "rule__Factor__VarAssignment_4_5");
			builder.put(grammarAccess.getFactorAccess().getExpAssignment_5_1(), "rule__Factor__ExpAssignment_5_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HOModelGrammarAccess grammarAccess;

	@Override
	protected InternalHOModelParser createParser() {
		InternalHOModelParser result = new InternalHOModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HOModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HOModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
