/**
 * generated by Xtext 2.26.0
 */
package org.consensus.homodel.hOModel.impl;

import org.consensus.homodel.hOModel.Algorithm;
import org.consensus.homodel.hOModel.Domain;
import org.consensus.homodel.hOModel.HOModelPackage;
import org.consensus.homodel.hOModel.Invariant;
import org.consensus.homodel.hOModel.RoundList;
import org.consensus.homodel.hOModel.Univalence;
import org.consensus.homodel.hOModel.VarialbeDeclaration;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Algorithm</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.consensus.homodel.hOModel.impl.AlgorithmImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.consensus.homodel.hOModel.impl.AlgorithmImpl#getVariabledeclaration <em>Variabledeclaration</em>}</li>
 *   <li>{@link org.consensus.homodel.hOModel.impl.AlgorithmImpl#getDomain <em>Domain</em>}</li>
 *   <li>{@link org.consensus.homodel.hOModel.impl.AlgorithmImpl#getRoundlist <em>Roundlist</em>}</li>
 *   <li>{@link org.consensus.homodel.hOModel.impl.AlgorithmImpl#getInv <em>Inv</em>}</li>
 *   <li>{@link org.consensus.homodel.hOModel.impl.AlgorithmImpl#getUv <em>Uv</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AlgorithmImpl extends MinimalEObjectImpl.Container implements Algorithm
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariabledeclaration() <em>Variabledeclaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariabledeclaration()
   * @generated
   * @ordered
   */
  protected VarialbeDeclaration variabledeclaration;

  /**
   * The cached value of the '{@link #getDomain() <em>Domain</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomain()
   * @generated
   * @ordered
   */
  protected Domain domain;

  /**
   * The cached value of the '{@link #getRoundlist() <em>Roundlist</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoundlist()
   * @generated
   * @ordered
   */
  protected RoundList roundlist;

  /**
   * The cached value of the '{@link #getInv() <em>Inv</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInv()
   * @generated
   * @ordered
   */
  protected Invariant inv;

  /**
   * The cached value of the '{@link #getUv() <em>Uv</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUv()
   * @generated
   * @ordered
   */
  protected Univalence uv;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AlgorithmImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HOModelPackage.Literals.ALGORITHM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HOModelPackage.ALGORITHM__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarialbeDeclaration getVariabledeclaration()
  {
    return variabledeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariabledeclaration(VarialbeDeclaration newVariabledeclaration, NotificationChain msgs)
  {
    VarialbeDeclaration oldVariabledeclaration = variabledeclaration;
    variabledeclaration = newVariabledeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HOModelPackage.ALGORITHM__VARIABLEDECLARATION, oldVariabledeclaration, newVariabledeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariabledeclaration(VarialbeDeclaration newVariabledeclaration)
  {
    if (newVariabledeclaration != variabledeclaration)
    {
      NotificationChain msgs = null;
      if (variabledeclaration != null)
        msgs = ((InternalEObject)variabledeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.ALGORITHM__VARIABLEDECLARATION, null, msgs);
      if (newVariabledeclaration != null)
        msgs = ((InternalEObject)newVariabledeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.ALGORITHM__VARIABLEDECLARATION, null, msgs);
      msgs = basicSetVariabledeclaration(newVariabledeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HOModelPackage.ALGORITHM__VARIABLEDECLARATION, newVariabledeclaration, newVariabledeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Domain getDomain()
  {
    return domain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDomain(Domain newDomain, NotificationChain msgs)
  {
    Domain oldDomain = domain;
    domain = newDomain;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HOModelPackage.ALGORITHM__DOMAIN, oldDomain, newDomain);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDomain(Domain newDomain)
  {
    if (newDomain != domain)
    {
      NotificationChain msgs = null;
      if (domain != null)
        msgs = ((InternalEObject)domain).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.ALGORITHM__DOMAIN, null, msgs);
      if (newDomain != null)
        msgs = ((InternalEObject)newDomain).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.ALGORITHM__DOMAIN, null, msgs);
      msgs = basicSetDomain(newDomain, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HOModelPackage.ALGORITHM__DOMAIN, newDomain, newDomain));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoundList getRoundlist()
  {
    return roundlist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRoundlist(RoundList newRoundlist, NotificationChain msgs)
  {
    RoundList oldRoundlist = roundlist;
    roundlist = newRoundlist;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HOModelPackage.ALGORITHM__ROUNDLIST, oldRoundlist, newRoundlist);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoundlist(RoundList newRoundlist)
  {
    if (newRoundlist != roundlist)
    {
      NotificationChain msgs = null;
      if (roundlist != null)
        msgs = ((InternalEObject)roundlist).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.ALGORITHM__ROUNDLIST, null, msgs);
      if (newRoundlist != null)
        msgs = ((InternalEObject)newRoundlist).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.ALGORITHM__ROUNDLIST, null, msgs);
      msgs = basicSetRoundlist(newRoundlist, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HOModelPackage.ALGORITHM__ROUNDLIST, newRoundlist, newRoundlist));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invariant getInv()
  {
    return inv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInv(Invariant newInv, NotificationChain msgs)
  {
    Invariant oldInv = inv;
    inv = newInv;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HOModelPackage.ALGORITHM__INV, oldInv, newInv);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInv(Invariant newInv)
  {
    if (newInv != inv)
    {
      NotificationChain msgs = null;
      if (inv != null)
        msgs = ((InternalEObject)inv).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.ALGORITHM__INV, null, msgs);
      if (newInv != null)
        msgs = ((InternalEObject)newInv).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.ALGORITHM__INV, null, msgs);
      msgs = basicSetInv(newInv, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HOModelPackage.ALGORITHM__INV, newInv, newInv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Univalence getUv()
  {
    return uv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUv(Univalence newUv, NotificationChain msgs)
  {
    Univalence oldUv = uv;
    uv = newUv;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HOModelPackage.ALGORITHM__UV, oldUv, newUv);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUv(Univalence newUv)
  {
    if (newUv != uv)
    {
      NotificationChain msgs = null;
      if (uv != null)
        msgs = ((InternalEObject)uv).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.ALGORITHM__UV, null, msgs);
      if (newUv != null)
        msgs = ((InternalEObject)newUv).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.ALGORITHM__UV, null, msgs);
      msgs = basicSetUv(newUv, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HOModelPackage.ALGORITHM__UV, newUv, newUv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HOModelPackage.ALGORITHM__VARIABLEDECLARATION:
        return basicSetVariabledeclaration(null, msgs);
      case HOModelPackage.ALGORITHM__DOMAIN:
        return basicSetDomain(null, msgs);
      case HOModelPackage.ALGORITHM__ROUNDLIST:
        return basicSetRoundlist(null, msgs);
      case HOModelPackage.ALGORITHM__INV:
        return basicSetInv(null, msgs);
      case HOModelPackage.ALGORITHM__UV:
        return basicSetUv(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HOModelPackage.ALGORITHM__NAME:
        return getName();
      case HOModelPackage.ALGORITHM__VARIABLEDECLARATION:
        return getVariabledeclaration();
      case HOModelPackage.ALGORITHM__DOMAIN:
        return getDomain();
      case HOModelPackage.ALGORITHM__ROUNDLIST:
        return getRoundlist();
      case HOModelPackage.ALGORITHM__INV:
        return getInv();
      case HOModelPackage.ALGORITHM__UV:
        return getUv();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HOModelPackage.ALGORITHM__NAME:
        setName((String)newValue);
        return;
      case HOModelPackage.ALGORITHM__VARIABLEDECLARATION:
        setVariabledeclaration((VarialbeDeclaration)newValue);
        return;
      case HOModelPackage.ALGORITHM__DOMAIN:
        setDomain((Domain)newValue);
        return;
      case HOModelPackage.ALGORITHM__ROUNDLIST:
        setRoundlist((RoundList)newValue);
        return;
      case HOModelPackage.ALGORITHM__INV:
        setInv((Invariant)newValue);
        return;
      case HOModelPackage.ALGORITHM__UV:
        setUv((Univalence)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HOModelPackage.ALGORITHM__NAME:
        setName(NAME_EDEFAULT);
        return;
      case HOModelPackage.ALGORITHM__VARIABLEDECLARATION:
        setVariabledeclaration((VarialbeDeclaration)null);
        return;
      case HOModelPackage.ALGORITHM__DOMAIN:
        setDomain((Domain)null);
        return;
      case HOModelPackage.ALGORITHM__ROUNDLIST:
        setRoundlist((RoundList)null);
        return;
      case HOModelPackage.ALGORITHM__INV:
        setInv((Invariant)null);
        return;
      case HOModelPackage.ALGORITHM__UV:
        setUv((Univalence)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HOModelPackage.ALGORITHM__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case HOModelPackage.ALGORITHM__VARIABLEDECLARATION:
        return variabledeclaration != null;
      case HOModelPackage.ALGORITHM__DOMAIN:
        return domain != null;
      case HOModelPackage.ALGORITHM__ROUNDLIST:
        return roundlist != null;
      case HOModelPackage.ALGORITHM__INV:
        return inv != null;
      case HOModelPackage.ALGORITHM__UV:
        return uv != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //AlgorithmImpl
