/**
 * generated by Xtext 2.26.0
 */
package org.consensus.homodel.hOModel.impl;

import org.consensus.homodel.hOModel.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class HOModelFactoryImpl extends EFactoryImpl implements HOModelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static HOModelFactory init()
  {
    try
    {
      HOModelFactory theHOModelFactory = (HOModelFactory)EPackage.Registry.INSTANCE.getEFactory(HOModelPackage.eNS_URI);
      if (theHOModelFactory != null)
      {
        return theHOModelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new HOModelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HOModelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case HOModelPackage.ALGORITHM: return createAlgorithm();
      case HOModelPackage.VARIALBE_DECLARATION: return createVarialbeDeclaration();
      case HOModelPackage.VARIABLE_DEC_LIST: return createVariableDecList();
      case HOModelPackage.VARIABLE_NAME_LIST: return createVariableNameList();
      case HOModelPackage.DOMAIN: return createDomain();
      case HOModelPackage.ROUND_LIST: return createRoundList();
      case HOModelPackage.ROUND: return createRound();
      case HOModelPackage.SEND_PART: return createSendPart();
      case HOModelPackage.MESSAGE: return createMessage();
      case HOModelPackage.TRANSITION_PART: return createTransitionPart();
      case HOModelPackage.INVARIANT: return createInvariant();
      case HOModelPackage.UNIVALENCE: return createUnivalence();
      case HOModelPackage.STATEMENT_LIST: return createStatementList();
      case HOModelPackage.STATEMENT: return createStatement();
      case HOModelPackage.ASSIGNMENT: return createAssignment();
      case HOModelPackage.VARIABLE: return createVariable();
      case HOModelPackage.NORMAL_VARIABLE: return createNormalVariable();
      case HOModelPackage.ARRAY_VARIABLE: return createArrayVariable();
      case HOModelPackage.DECISION: return createDecision();
      case HOModelPackage.EXPRESSION: return createExpression();
      case HOModelPackage.CONJUNCTIVE_EXPRESSION: return createConjunctiveExpression();
      case HOModelPackage.EQUALITY_EXPRESSION: return createEqualityExpression();
      case HOModelPackage.RELATIONAL_EXPRESSION: return createRelationalExpression();
      case HOModelPackage.SIMPLE_EXPRESSION: return createSimpleExpression();
      case HOModelPackage.TERM: return createTerm();
      case HOModelPackage.FACTOR: return createFactor();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Algorithm createAlgorithm()
  {
    AlgorithmImpl algorithm = new AlgorithmImpl();
    return algorithm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarialbeDeclaration createVarialbeDeclaration()
  {
    VarialbeDeclarationImpl varialbeDeclaration = new VarialbeDeclarationImpl();
    return varialbeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDecList createVariableDecList()
  {
    VariableDecListImpl variableDecList = new VariableDecListImpl();
    return variableDecList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableNameList createVariableNameList()
  {
    VariableNameListImpl variableNameList = new VariableNameListImpl();
    return variableNameList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Domain createDomain()
  {
    DomainImpl domain = new DomainImpl();
    return domain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoundList createRoundList()
  {
    RoundListImpl roundList = new RoundListImpl();
    return roundList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Round createRound()
  {
    RoundImpl round = new RoundImpl();
    return round;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SendPart createSendPart()
  {
    SendPartImpl sendPart = new SendPartImpl();
    return sendPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message createMessage()
  {
    MessageImpl message = new MessageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransitionPart createTransitionPart()
  {
    TransitionPartImpl transitionPart = new TransitionPartImpl();
    return transitionPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invariant createInvariant()
  {
    InvariantImpl invariant = new InvariantImpl();
    return invariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Univalence createUnivalence()
  {
    UnivalenceImpl univalence = new UnivalenceImpl();
    return univalence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatementList createStatementList()
  {
    StatementListImpl statementList = new StatementListImpl();
    return statementList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NormalVariable createNormalVariable()
  {
    NormalVariableImpl normalVariable = new NormalVariableImpl();
    return normalVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayVariable createArrayVariable()
  {
    ArrayVariableImpl arrayVariable = new ArrayVariableImpl();
    return arrayVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Decision createDecision()
  {
    DecisionImpl decision = new DecisionImpl();
    return decision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConjunctiveExpression createConjunctiveExpression()
  {
    ConjunctiveExpressionImpl conjunctiveExpression = new ConjunctiveExpressionImpl();
    return conjunctiveExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualityExpression createEqualityExpression()
  {
    EqualityExpressionImpl equalityExpression = new EqualityExpressionImpl();
    return equalityExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationalExpression createRelationalExpression()
  {
    RelationalExpressionImpl relationalExpression = new RelationalExpressionImpl();
    return relationalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleExpression createSimpleExpression()
  {
    SimpleExpressionImpl simpleExpression = new SimpleExpressionImpl();
    return simpleExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term createTerm()
  {
    TermImpl term = new TermImpl();
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Factor createFactor()
  {
    FactorImpl factor = new FactorImpl();
    return factor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HOModelPackage getHOModelPackage()
  {
    return (HOModelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static HOModelPackage getPackage()
  {
    return HOModelPackage.eINSTANCE;
  }

} //HOModelFactoryImpl
