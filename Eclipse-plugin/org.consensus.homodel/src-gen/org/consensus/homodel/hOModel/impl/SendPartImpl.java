/**
 * generated by Xtext 2.26.0
 */
package org.consensus.homodel.hOModel.impl;

import org.consensus.homodel.hOModel.Expression;
import org.consensus.homodel.hOModel.HOModelPackage;
import org.consensus.homodel.hOModel.Message;
import org.consensus.homodel.hOModel.SendPart;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Send Part</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.consensus.homodel.hOModel.impl.SendPartImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link org.consensus.homodel.hOModel.impl.SendPartImpl#getMessage1 <em>Message1</em>}</li>
 *   <li>{@link org.consensus.homodel.hOModel.impl.SendPartImpl#getMessage2 <em>Message2</em>}</li>
 *   <li>{@link org.consensus.homodel.hOModel.impl.SendPartImpl#getMessage <em>Message</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SendPartImpl extends MinimalEObjectImpl.Container implements SendPart
{
  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected Expression exp;

  /**
   * The cached value of the '{@link #getMessage1() <em>Message1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessage1()
   * @generated
   * @ordered
   */
  protected Message message1;

  /**
   * The cached value of the '{@link #getMessage2() <em>Message2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessage2()
   * @generated
   * @ordered
   */
  protected Message message2;

  /**
   * The cached value of the '{@link #getMessage() <em>Message</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessage()
   * @generated
   * @ordered
   */
  protected Message message;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SendPartImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HOModelPackage.Literals.SEND_PART;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExp(Expression newExp, NotificationChain msgs)
  {
    Expression oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HOModelPackage.SEND_PART__EXP, oldExp, newExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExp(Expression newExp)
  {
    if (newExp != exp)
    {
      NotificationChain msgs = null;
      if (exp != null)
        msgs = ((InternalEObject)exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.SEND_PART__EXP, null, msgs);
      if (newExp != null)
        msgs = ((InternalEObject)newExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.SEND_PART__EXP, null, msgs);
      msgs = basicSetExp(newExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HOModelPackage.SEND_PART__EXP, newExp, newExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message getMessage1()
  {
    return message1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMessage1(Message newMessage1, NotificationChain msgs)
  {
    Message oldMessage1 = message1;
    message1 = newMessage1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HOModelPackage.SEND_PART__MESSAGE1, oldMessage1, newMessage1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMessage1(Message newMessage1)
  {
    if (newMessage1 != message1)
    {
      NotificationChain msgs = null;
      if (message1 != null)
        msgs = ((InternalEObject)message1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.SEND_PART__MESSAGE1, null, msgs);
      if (newMessage1 != null)
        msgs = ((InternalEObject)newMessage1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.SEND_PART__MESSAGE1, null, msgs);
      msgs = basicSetMessage1(newMessage1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HOModelPackage.SEND_PART__MESSAGE1, newMessage1, newMessage1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message getMessage2()
  {
    return message2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMessage2(Message newMessage2, NotificationChain msgs)
  {
    Message oldMessage2 = message2;
    message2 = newMessage2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HOModelPackage.SEND_PART__MESSAGE2, oldMessage2, newMessage2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMessage2(Message newMessage2)
  {
    if (newMessage2 != message2)
    {
      NotificationChain msgs = null;
      if (message2 != null)
        msgs = ((InternalEObject)message2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.SEND_PART__MESSAGE2, null, msgs);
      if (newMessage2 != null)
        msgs = ((InternalEObject)newMessage2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.SEND_PART__MESSAGE2, null, msgs);
      msgs = basicSetMessage2(newMessage2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HOModelPackage.SEND_PART__MESSAGE2, newMessage2, newMessage2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message getMessage()
  {
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMessage(Message newMessage, NotificationChain msgs)
  {
    Message oldMessage = message;
    message = newMessage;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HOModelPackage.SEND_PART__MESSAGE, oldMessage, newMessage);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMessage(Message newMessage)
  {
    if (newMessage != message)
    {
      NotificationChain msgs = null;
      if (message != null)
        msgs = ((InternalEObject)message).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.SEND_PART__MESSAGE, null, msgs);
      if (newMessage != null)
        msgs = ((InternalEObject)newMessage).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HOModelPackage.SEND_PART__MESSAGE, null, msgs);
      msgs = basicSetMessage(newMessage, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HOModelPackage.SEND_PART__MESSAGE, newMessage, newMessage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HOModelPackage.SEND_PART__EXP:
        return basicSetExp(null, msgs);
      case HOModelPackage.SEND_PART__MESSAGE1:
        return basicSetMessage1(null, msgs);
      case HOModelPackage.SEND_PART__MESSAGE2:
        return basicSetMessage2(null, msgs);
      case HOModelPackage.SEND_PART__MESSAGE:
        return basicSetMessage(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HOModelPackage.SEND_PART__EXP:
        return getExp();
      case HOModelPackage.SEND_PART__MESSAGE1:
        return getMessage1();
      case HOModelPackage.SEND_PART__MESSAGE2:
        return getMessage2();
      case HOModelPackage.SEND_PART__MESSAGE:
        return getMessage();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HOModelPackage.SEND_PART__EXP:
        setExp((Expression)newValue);
        return;
      case HOModelPackage.SEND_PART__MESSAGE1:
        setMessage1((Message)newValue);
        return;
      case HOModelPackage.SEND_PART__MESSAGE2:
        setMessage2((Message)newValue);
        return;
      case HOModelPackage.SEND_PART__MESSAGE:
        setMessage((Message)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HOModelPackage.SEND_PART__EXP:
        setExp((Expression)null);
        return;
      case HOModelPackage.SEND_PART__MESSAGE1:
        setMessage1((Message)null);
        return;
      case HOModelPackage.SEND_PART__MESSAGE2:
        setMessage2((Message)null);
        return;
      case HOModelPackage.SEND_PART__MESSAGE:
        setMessage((Message)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HOModelPackage.SEND_PART__EXP:
        return exp != null;
      case HOModelPackage.SEND_PART__MESSAGE1:
        return message1 != null;
      case HOModelPackage.SEND_PART__MESSAGE2:
        return message2 != null;
      case HOModelPackage.SEND_PART__MESSAGE:
        return message != null;
    }
    return super.eIsSet(featureID);
  }

} //SendPartImpl
