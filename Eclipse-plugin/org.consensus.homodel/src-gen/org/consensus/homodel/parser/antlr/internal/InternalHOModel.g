/*
 * generated by Xtext 2.26.0
 */
grammar InternalHOModel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.consensus.homodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.consensus.homodel.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.consensus.homodel.services.HOModelGrammarAccess;

}

@parser::members {

 	private HOModelGrammarAccess grammarAccess;

    public InternalHOModelParser(TokenStream input, HOModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Algorithm";
   	}

   	@Override
   	protected HOModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAlgorithm
entryRuleAlgorithm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgorithmRule()); }
	iv_ruleAlgorithm=ruleAlgorithm
	{ $current=$iv_ruleAlgorithm.current; }
	EOF;

// Rule Algorithm
ruleAlgorithm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Algorithm'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlgorithmAccess().getAlgorithmKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAlgorithmAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlgorithmRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getAlgorithmAccess().getSemicolonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmAccess().getVariabledeclarationVarialbeDeclarationParserRuleCall_3_0());
				}
				lv_variabledeclaration_3_0=ruleVarialbeDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
					}
					set(
						$current,
						"variabledeclaration",
						lv_variabledeclaration_3_0,
						"org.consensus.homodel.HOModel.VarialbeDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmAccess().getDomainDomainParserRuleCall_4_0());
				}
				lv_domain_4_0=ruleDomain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
					}
					set(
						$current,
						"domain",
						lv_domain_4_0,
						"org.consensus.homodel.HOModel.Domain");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmAccess().getRoundlistRoundListParserRuleCall_5_0());
				}
				lv_roundlist_5_0=ruleRoundList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
					}
					set(
						$current,
						"roundlist",
						lv_roundlist_5_0,
						"org.consensus.homodel.HOModel.RoundList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmAccess().getInvInvariantParserRuleCall_6_0());
				}
				lv_inv_6_0=ruleInvariant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
					}
					set(
						$current,
						"inv",
						lv_inv_6_0,
						"org.consensus.homodel.HOModel.Invariant");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmAccess().getUvUnivalenceParserRuleCall_7_0());
				}
				lv_uv_7_0=ruleUnivalence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmRule());
					}
					set(
						$current,
						"uv",
						lv_uv_7_0,
						"org.consensus.homodel.HOModel.Univalence");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleVarialbeDeclaration
entryRuleVarialbeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarialbeDeclarationRule()); }
	iv_ruleVarialbeDeclaration=ruleVarialbeDeclaration
	{ $current=$iv_ruleVarialbeDeclaration.current; }
	EOF;

// Rule VarialbeDeclaration
ruleVarialbeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Variable'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarialbeDeclarationAccess().getVariableKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarialbeDeclarationAccess().getListVariableDecListParserRuleCall_1_0());
				}
				lv_list_1_0=ruleVariableDecList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarialbeDeclarationRule());
					}
					add(
						$current,
						"list",
						lv_list_1_0,
						"org.consensus.homodel.HOModel.VariableDecList");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleVariableDecList
entryRuleVariableDecList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDecListRule()); }
	iv_ruleVariableDecList=ruleVariableDecList
	{ $current=$iv_ruleVariableDecList.current; }
	EOF;

// Rule VariableDecList
ruleVariableDecList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='hidden'
			{
				newLeafNode(otherlv_0, grammarAccess.getVariableDecListAccess().getHiddenKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDecListAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDecListRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.consensus.homodel.HOModel.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDecListAccess().getVariablenamelistVariableNameListParserRuleCall_2_0());
				}
				lv_variablenamelist_2_0=ruleVariableNameList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDecListRule());
					}
					set(
						$current,
						"variablenamelist",
						lv_variablenamelist_2_0,
						"org.consensus.homodel.HOModel.VariableNameList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getVariableDecListAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleVariableNameList
entryRuleVariableNameList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableNameListRule()); }
	iv_ruleVariableNameList=ruleVariableNameList
	{ $current=$iv_ruleVariableNameList.current; }
	EOF;

// Rule VariableNameList
ruleVariableNameList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVariableNameListAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableNameListRule());
					}
					addWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getVariableNameListAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableNameListAccess().getValueINITIAL_CONSTParserRuleCall_1_1_0());
					}
					lv_value_2_0=ruleINITIAL_CONST
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableNameListRule());
						}
						add(
							$current,
							"value",
							lv_value_2_0,
							"org.consensus.homodel.HOModel.INITIAL_CONST");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getVariableNameListAccess().getCommaKeyword_2_0());
			}
			(
				(
					lv_name_4_0=RULE_ID
					{
						newLeafNode(lv_name_4_0, grammarAccess.getVariableNameListAccess().getNameIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableNameListRule());
						}
						addWithLastConsumed(
							$current,
							"name",
							lv_name_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_5='='
				{
					newLeafNode(otherlv_5, grammarAccess.getVariableNameListAccess().getEqualsSignKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableNameListAccess().getValueINITIAL_CONSTParserRuleCall_2_2_1_0());
						}
						lv_value_6_0=ruleINITIAL_CONST
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableNameListRule());
							}
							add(
								$current,
								"value",
								lv_value_6_0,
								"org.consensus.homodel.HOModel.INITIAL_CONST");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)*
	)
;

// Entry rule entryRuleDomain
entryRuleDomain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainRule()); }
	iv_ruleDomain=ruleDomain
	{ $current=$iv_ruleDomain.current; }
	EOF;

// Rule Domain
ruleDomain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Domain'
		{
			newLeafNode(otherlv_0, grammarAccess.getDomainAccess().getDomainKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getDomainAccess().getLeftCurlyBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getDomainAccess().getStatementListParserRuleCall_2());
		}
		this_StatementList_2=ruleStatementList
		{
			$current = $this_StatementList_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getDomainAccess().getRightCurlyBracketKeyword_3());
		}
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getDomainAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleRoundList
entryRuleRoundList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoundListRule()); }
	iv_ruleRoundList=ruleRoundList
	{ $current=$iv_ruleRoundList.current; }
	EOF;

// Rule RoundList
ruleRoundList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRoundListAccess().getRoundRoundParserRuleCall_0_0());
				}
				lv_round_0_0=ruleRound
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoundListRule());
					}
					add(
						$current,
						"round",
						lv_round_0_0,
						"org.consensus.homodel.HOModel.Round");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getRoundListAccess().getSemicolonKeyword_1());
		}
	)+
;

// Entry rule entryRuleRound
entryRuleRound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoundRule()); }
	iv_ruleRound=ruleRound
	{ $current=$iv_ruleRound.current; }
	EOF;

// Rule Round
ruleRound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Round'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoundAccess().getRoundKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getRoundAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='SendPart'
		{
			newLeafNode(otherlv_2, grammarAccess.getRoundAccess().getSendPartKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoundAccess().getSendSendPartParserRuleCall_3_0());
				}
				lv_send_3_0=ruleSendPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoundRule());
					}
					set(
						$current,
						"send",
						lv_send_3_0,
						"org.consensus.homodel.HOModel.SendPart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getRoundAccess().getSemicolonKeyword_4());
		}
		otherlv_5='TransitionPart'
		{
			newLeafNode(otherlv_5, grammarAccess.getRoundAccess().getTransitionPartKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoundAccess().getTransitionTransitionPartParserRuleCall_6_0());
				}
				lv_transition_6_0=ruleTransitionPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoundRule());
					}
					set(
						$current,
						"transition",
						lv_transition_6_0,
						"org.consensus.homodel.HOModel.TransitionPart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getRoundAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleSendPart
entryRuleSendPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSendPartRule()); }
	iv_ruleSendPart=ruleSendPart
	{ $current=$iv_ruleSendPart.current; }
	EOF;

// Rule SendPart
ruleSendPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='if'
			{
				newLeafNode(otherlv_0, grammarAccess.getSendPartAccess().getIfKeyword_0_0());
			}
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getSendPartAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSendPartAccess().getExpExpressionParserRuleCall_0_2_0());
					}
					lv_exp_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSendPartRule());
						}
						set(
							$current,
							"exp",
							lv_exp_2_0,
							"org.consensus.homodel.HOModel.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getSendPartAccess().getRightParenthesisKeyword_0_3());
			}
			otherlv_4='send'
			{
				newLeafNode(otherlv_4, grammarAccess.getSendPartAccess().getSendKeyword_0_4());
			}
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getSendPartAccess().getLeftParenthesisKeyword_0_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSendPartAccess().getMessage1MessageParserRuleCall_0_6_0());
					}
					lv_message1_6_0=ruleMessage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSendPartRule());
						}
						set(
							$current,
							"message1",
							lv_message1_6_0,
							"org.consensus.homodel.HOModel.Message");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getSendPartAccess().getCommaKeyword_0_7());
			}
			(
				otherlv_8='All'
				{
					newLeafNode(otherlv_8, grammarAccess.getSendPartAccess().getAllKeyword_0_8_0());
				}
				    |
				otherlv_9='Coord'
				{
					newLeafNode(otherlv_9, grammarAccess.getSendPartAccess().getCoordKeyword_0_8_1());
				}
			)
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getSendPartAccess().getRightParenthesisKeyword_0_9());
			}
			(
				otherlv_11='else'
				{
					newLeafNode(otherlv_11, grammarAccess.getSendPartAccess().getElseKeyword_0_10_0());
				}
				otherlv_12='send'
				{
					newLeafNode(otherlv_12, grammarAccess.getSendPartAccess().getSendKeyword_0_10_1());
				}
				otherlv_13='('
				{
					newLeafNode(otherlv_13, grammarAccess.getSendPartAccess().getLeftParenthesisKeyword_0_10_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSendPartAccess().getMessage2MessageParserRuleCall_0_10_3_0());
						}
						lv_message2_14_0=ruleMessage
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSendPartRule());
							}
							set(
								$current,
								"message2",
								lv_message2_14_0,
								"org.consensus.homodel.HOModel.Message");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_15=','
				{
					newLeafNode(otherlv_15, grammarAccess.getSendPartAccess().getCommaKeyword_0_10_4());
				}
				(
					otherlv_16='All'
					{
						newLeafNode(otherlv_16, grammarAccess.getSendPartAccess().getAllKeyword_0_10_5_0());
					}
					    |
					otherlv_17='Coord'
					{
						newLeafNode(otherlv_17, grammarAccess.getSendPartAccess().getCoordKeyword_0_10_5_1());
					}
				)
				otherlv_18=')'
				{
					newLeafNode(otherlv_18, grammarAccess.getSendPartAccess().getRightParenthesisKeyword_0_10_6());
				}
			)?
		)
		    |
		(
			otherlv_19='send'
			{
				newLeafNode(otherlv_19, grammarAccess.getSendPartAccess().getSendKeyword_1_0());
			}
			otherlv_20='('
			{
				newLeafNode(otherlv_20, grammarAccess.getSendPartAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSendPartAccess().getMessageMessageParserRuleCall_1_2_0());
					}
					lv_message_21_0=ruleMessage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSendPartRule());
						}
						set(
							$current,
							"message",
							lv_message_21_0,
							"org.consensus.homodel.HOModel.Message");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_22=','
			{
				newLeafNode(otherlv_22, grammarAccess.getSendPartAccess().getCommaKeyword_1_3());
			}
			(
				otherlv_23='All'
				{
					newLeafNode(otherlv_23, grammarAccess.getSendPartAccess().getAllKeyword_1_4_0());
				}
				    |
				otherlv_24='Coord'
				{
					newLeafNode(otherlv_24, grammarAccess.getSendPartAccess().getCoordKeyword_1_4_1());
				}
			)
			otherlv_25=')'
			{
				newLeafNode(otherlv_25, grammarAccess.getSendPartAccess().getRightParenthesisKeyword_1_5());
			}
		)
	)
;

// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	iv_ruleMessage=ruleMessage
	{ $current=$iv_ruleMessage.current; }
	EOF;

// Rule Message
ruleMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getMessageAccess().getMessageAction_0_0(),
						$current);
				}
			)
			(
				otherlv_1='<'
				{
					newLeafNode(otherlv_1, grammarAccess.getMessageAccess().getLessThanSignKeyword_0_1_0());
				}
				(
					(
						(
							lv_msg_2_0=RULE_ID
							{
								newLeafNode(lv_msg_2_0, grammarAccess.getMessageAccess().getMsgIDTerminalRuleCall_0_1_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMessageRule());
								}
								addWithLastConsumed(
									$current,
									"msg",
									lv_msg_2_0,
									"org.eclipse.xtext.common.Terminals.ID");
							}
						)
					)
					    |
					otherlv_3='Coord'
					{
						newLeafNode(otherlv_3, grammarAccess.getMessageAccess().getCoordKeyword_0_1_1_1());
					}
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getMessageAccess().getCommaKeyword_0_1_2_0());
					}
					(
						(
							(
								lv_msg_5_0=RULE_ID
								{
									newLeafNode(lv_msg_5_0, grammarAccess.getMessageAccess().getMsgIDTerminalRuleCall_0_1_2_1_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getMessageRule());
									}
									addWithLastConsumed(
										$current,
										"msg",
										lv_msg_5_0,
										"org.eclipse.xtext.common.Terminals.ID");
								}
							)
						)
						    |
						otherlv_6='Coord'
						{
							newLeafNode(otherlv_6, grammarAccess.getMessageAccess().getCoordKeyword_0_1_2_1_1());
						}
					)
				)*
				otherlv_7='>'
				{
					newLeafNode(otherlv_7, grammarAccess.getMessageAccess().getGreaterThanSignKeyword_0_1_3());
				}
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getMessageAccess().getMessageAction_1_0(),
						$current);
				}
			)
			otherlv_9='<'
			{
				newLeafNode(otherlv_9, grammarAccess.getMessageAccess().getLessThanSignKeyword_1_1());
			}
			otherlv_10='ack'
			{
				newLeafNode(otherlv_10, grammarAccess.getMessageAccess().getAckKeyword_1_2());
			}
			otherlv_11='>'
			{
				newLeafNode(otherlv_11, grammarAccess.getMessageAccess().getGreaterThanSignKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleTransitionPart
entryRuleTransitionPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionPartRule()); }
	iv_ruleTransitionPart=ruleTransitionPart
	{ $current=$iv_ruleTransitionPart.current; }
	EOF;

// Rule TransitionPart
ruleTransitionPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTransitionPartAccess().getStatementListParserRuleCall());
	}
	this_StatementList_0=ruleStatementList
	{
		$current = $this_StatementList_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleInvariant
entryRuleInvariant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvariantRule()); }
	iv_ruleInvariant=ruleInvariant
	{ $current=$iv_ruleInvariant.current; }
	EOF;

// Rule Invariant
ruleInvariant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Invariant'
		{
			newLeafNode(otherlv_0, grammarAccess.getInvariantAccess().getInvariantKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getInvariantAccess().getLeftCurlyBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getInvariantAccess().getStatementListParserRuleCall_2());
		}
		this_StatementList_2=ruleStatementList
		{
			$current = $this_StatementList_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getInvariantAccess().getRightCurlyBracketKeyword_3());
		}
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getInvariantAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleUnivalence
entryRuleUnivalence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnivalenceRule()); }
	iv_ruleUnivalence=ruleUnivalence
	{ $current=$iv_ruleUnivalence.current; }
	EOF;

// Rule Univalence
ruleUnivalence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Univalence'
		{
			newLeafNode(otherlv_0, grammarAccess.getUnivalenceAccess().getUnivalenceKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getUnivalenceAccess().getLeftCurlyBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getUnivalenceAccess().getStatementListParserRuleCall_2());
		}
		this_StatementList_2=ruleStatementList
		{
			$current = $this_StatementList_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getUnivalenceAccess().getRightCurlyBracketKeyword_3());
		}
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getUnivalenceAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleStatementList
entryRuleStatementList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	iv_ruleStatementList=ruleStatementList
	{ $current=$iv_ruleStatementList.current; }
	EOF;

// Rule StatementList
ruleStatementList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStatementListAccess().getStatementListAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementListAccess().getStatementsStatementParserRuleCall_1_0_0());
					}
					lv_statements_1_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementListRule());
						}
						add(
							$current,
							"statements",
							lv_statements_1_0,
							"org.consensus.homodel.HOModel.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getStatementListAccess().getSemicolonKeyword_1_1());
			}
		)*
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_0());
		}
		this_Assignment_0=ruleAssignment
		{
			$current = $this_Assignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDecisionParserRuleCall_1());
		}
		this_Decision_1=ruleDecision
		{
			$current = $this_Decision_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2='for'
			{
				newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getForKeyword_2_0());
			}
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getLeftSquareBracketKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getVarVariableParserRuleCall_2_2_0());
					}
					lv_var_4_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"var",
							lv_var_4_0,
							"org.consensus.homodel.HOModel.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='='
			{
				newLeafNode(otherlv_5, grammarAccess.getStatementAccess().getEqualsSignKeyword_2_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getExpExpressionParserRuleCall_2_4_0());
					}
					lv_exp_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"exp",
							lv_exp_6_0,
							"org.consensus.homodel.HOModel.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7='to'
			{
				newLeafNode(otherlv_7, grammarAccess.getStatementAccess().getToKeyword_2_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getExpExpressionParserRuleCall_2_6_0());
					}
					lv_exp_8_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"exp",
							lv_exp_8_0,
							"org.consensus.homodel.HOModel.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=']'
			{
				newLeafNode(otherlv_9, grammarAccess.getStatementAccess().getRightSquareBracketKeyword_2_7());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getStatementStatementParserRuleCall_2_8_0());
					}
					lv_statement_10_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"statement",
							lv_statement_10_0,
							"org.consensus.homodel.HOModel.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_11='if'
			{
				newLeafNode(otherlv_11, grammarAccess.getStatementAccess().getIfKeyword_3_0());
			}
			otherlv_12='('
			{
				newLeafNode(otherlv_12, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getExpExpressionParserRuleCall_3_2_0());
					}
					lv_exp_13_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"exp",
							lv_exp_13_0,
							"org.consensus.homodel.HOModel.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14=')'
			{
				newLeafNode(otherlv_14, grammarAccess.getStatementAccess().getRightParenthesisKeyword_3_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getStatementStatementParserRuleCall_3_4_0());
					}
					lv_statement_15_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						add(
							$current,
							"statement",
							lv_statement_15_0,
							"org.consensus.homodel.HOModel.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_16='else'
				{
					newLeafNode(otherlv_16, grammarAccess.getStatementAccess().getElseKeyword_3_5_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStatementAccess().getStatementStatementParserRuleCall_3_5_1_0());
						}
						lv_statement_17_0=ruleStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStatementRule());
							}
							add(
								$current,
								"statement",
								lv_statement_17_0,
								"org.consensus.homodel.HOModel.Statement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			otherlv_18='assume'
			{
				newLeafNode(otherlv_18, grammarAccess.getStatementAccess().getAssumeKeyword_4_0());
			}
			otherlv_19='('
			{
				newLeafNode(otherlv_19, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_4_1());
			}
			{
				newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_4_2());
			}
			this_Expression_20=ruleExpression
			{
				$current = $this_Expression_20.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_21=')'
			{
				newLeafNode(otherlv_21, grammarAccess.getStatementAccess().getRightParenthesisKeyword_4_3());
			}
		)
		    |
		(
			otherlv_22='assert'
			{
				newLeafNode(otherlv_22, grammarAccess.getStatementAccess().getAssertKeyword_5_0());
			}
			otherlv_23='('
			{
				newLeafNode(otherlv_23, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_5_1());
			}
			{
				newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_5_2());
			}
			this_Expression_24=ruleExpression
			{
				$current = $this_Expression_24.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_25=')'
			{
				newLeafNode(otherlv_25, grammarAccess.getStatementAccess().getRightParenthesisKeyword_5_3());
			}
		)
		    |
		(
			otherlv_26='{'
			{
				newLeafNode(otherlv_26, grammarAccess.getStatementAccess().getLeftCurlyBracketKeyword_6_0());
			}
			{
				newCompositeNode(grammarAccess.getStatementAccess().getStatementListParserRuleCall_6_1());
			}
			this_StatementList_27=ruleStatementList
			{
				$current = $this_StatementList_27.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_28='}'
			{
				newLeafNode(otherlv_28, grammarAccess.getStatementAccess().getRightCurlyBracketKeyword_6_2());
			}
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getVarVariableParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					add(
						$current,
						"var",
						lv_var_0_0,
						"org.consensus.homodel.HOModel.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getExpExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					add(
						$current,
						"exp",
						lv_exp_2_0,
						"org.consensus.homodel.HOModel.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableAccess().getNormalVariableParserRuleCall_0());
		}
		this_NormalVariable_0=ruleNormalVariable
		{
			$current = $this_NormalVariable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableAccess().getArrayVariableParserRuleCall_1());
		}
		this_ArrayVariable_1=ruleArrayVariable
		{
			$current = $this_ArrayVariable_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNormalVariable
entryRuleNormalVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNormalVariableRule()); }
	iv_ruleNormalVariable=ruleNormalVariable
	{ $current=$iv_ruleNormalVariable.current; }
	EOF;

// Rule NormalVariable
ruleNormalVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getNormalVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNormalVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleArrayVariable
entryRuleArrayVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayVariableRule()); }
	iv_ruleArrayVariable=ruleArrayVariable
	{ $current=$iv_ruleArrayVariable.current; }
	EOF;

// Rule ArrayVariable
ruleArrayVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getArrayVariableAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArrayVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getArrayVariableAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayVariableAccess().getExpExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayVariableRule());
					}
					add(
						$current,
						"exp",
						lv_exp_2_0,
						"org.consensus.homodel.HOModel.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getArrayVariableAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleDecision
entryRuleDecision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecisionRule()); }
	iv_ruleDecision=ruleDecision
	{ $current=$iv_ruleDecision.current; }
	EOF;

// Rule Decision
ruleDecision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DECIDE'
		{
			newLeafNode(otherlv_0, grammarAccess.getDecisionAccess().getDECIDEKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getDecisionAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getDecisionAccess().getExpressionParserRuleCall_2());
		}
		this_Expression_2=ruleExpression
		{
			$current = $this_Expression_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getDecisionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpConjunctiveExpressionParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleConjunctiveExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_0_0,
						"org.consensus.homodel.HOModel.ConjunctiveExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='||'
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getVerticalLineVerticalLineKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getExpConjunctiveExpressionParserRuleCall_1_1_0());
					}
					lv_exp_2_0=ruleConjunctiveExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						add(
							$current,
							"exp",
							lv_exp_2_0,
							"org.consensus.homodel.HOModel.ConjunctiveExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConjunctiveExpression
entryRuleConjunctiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctiveExpressionRule()); }
	iv_ruleConjunctiveExpression=ruleConjunctiveExpression
	{ $current=$iv_ruleConjunctiveExpression.current; }
	EOF;

// Rule ConjunctiveExpression
ruleConjunctiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConjunctiveExpressionAccess().getExpEqualityExpressionParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleEqualityExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConjunctiveExpressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_0_0,
						"org.consensus.homodel.HOModel.EqualityExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='&&'
			{
				newLeafNode(otherlv_1, grammarAccess.getConjunctiveExpressionAccess().getAmpersandAmpersandKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConjunctiveExpressionAccess().getExpEqualityExpressionParserRuleCall_1_1_0());
					}
					lv_exp_2_0=ruleEqualityExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConjunctiveExpressionRule());
						}
						add(
							$current,
							"exp",
							lv_exp_2_0,
							"org.consensus.homodel.HOModel.EqualityExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	iv_ruleEqualityExpression=ruleEqualityExpression
	{ $current=$iv_ruleEqualityExpression.current; }
	EOF;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpRelationalExpressionParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleRelationalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_0_0,
						"org.consensus.homodel.HOModel.RelationalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='=='
				{
					newLeafNode(otherlv_1, grammarAccess.getEqualityExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0());
				}
				    |
				otherlv_2='!='
				{
					newLeafNode(otherlv_2, grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpRelationalExpressionParserRuleCall_1_1_0());
					}
					lv_exp_3_0=ruleRelationalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
						}
						add(
							$current,
							"exp",
							lv_exp_3_0,
							"org.consensus.homodel.HOModel.RelationalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	iv_ruleRelationalExpression=ruleRelationalExpression
	{ $current=$iv_ruleRelationalExpression.current; }
	EOF;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpSimpleExpressionParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleSimpleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
					}
					add(
						$current,
						"exp",
						lv_exp_0_0,
						"org.consensus.homodel.HOModel.SimpleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='<'
				{
					newLeafNode(otherlv_1, grammarAccess.getRelationalExpressionAccess().getLessThanSignKeyword_1_0_0());
				}
				    |
				otherlv_2='<='
				{
					newLeafNode(otherlv_2, grammarAccess.getRelationalExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_1());
				}
				    |
				otherlv_3='>'
				{
					newLeafNode(otherlv_3, grammarAccess.getRelationalExpressionAccess().getGreaterThanSignKeyword_1_0_2());
				}
				    |
				otherlv_4='>='
				{
					newLeafNode(otherlv_4, grammarAccess.getRelationalExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_3());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpSimpleExpressionParserRuleCall_1_1_0());
					}
					lv_exp_5_0=ruleSimpleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
						}
						add(
							$current,
							"exp",
							lv_exp_5_0,
							"org.consensus.homodel.HOModel.SimpleExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	iv_ruleSimpleExpression=ruleSimpleExpression
	{ $current=$iv_ruleSimpleExpression.current; }
	EOF;

// Rule SimpleExpression
ruleSimpleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleExpressionAccess().getTermTermParserRuleCall_0_0());
				}
				lv_term_0_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
					}
					add(
						$current,
						"term",
						lv_term_0_0,
						"org.consensus.homodel.HOModel.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='+'
				{
					newLeafNode(otherlv_1, grammarAccess.getSimpleExpressionAccess().getPlusSignKeyword_1_0_0());
				}
				    |
				otherlv_2='-'
				{
					newLeafNode(otherlv_2, grammarAccess.getSimpleExpressionAccess().getHyphenMinusKeyword_1_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleExpressionAccess().getTermTermParserRuleCall_1_1_0());
					}
					lv_term_3_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
						}
						add(
							$current,
							"term",
							lv_term_3_0,
							"org.consensus.homodel.HOModel.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getFactorFactorParserRuleCall_0_0());
				}
				lv_factor_0_0=ruleFactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					add(
						$current,
						"factor",
						lv_factor_0_0,
						"org.consensus.homodel.HOModel.Factor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1='*'
				{
					newLeafNode(otherlv_1, grammarAccess.getTermAccess().getAsteriskKeyword_1_0_0());
				}
				    |
				otherlv_2='/'
				{
					newLeafNode(otherlv_2, grammarAccess.getTermAccess().getSolidusKeyword_1_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getFactorFactorParserRuleCall_1_1_0());
					}
					lv_factor_3_0=ruleFactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						add(
							$current,
							"factor",
							lv_factor_3_0,
							"org.consensus.homodel.HOModel.Factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_ruleFactor=ruleFactor
	{ $current=$iv_ruleFactor.current; }
	EOF;

// Rule Factor
ruleFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFactorAccess().getVariableParserRuleCall_0());
		}
		this_Variable_0=ruleVariable
		{
			$current = $this_Variable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFactorAccess().getFactorAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getFactorAccess().getCONSTANTParserRuleCall_1_1());
			}
			ruleCONSTANT
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFactorAccess().getFactorAction_2_0(),
						$current);
				}
			)
			otherlv_4='isCoord'
			{
				newLeafNode(otherlv_4, grammarAccess.getFactorAccess().getIsCoordKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFactorAccess().getFactorAction_3_0(),
						$current);
				}
			)
			otherlv_6='Coord'
			{
				newLeafNode(otherlv_6, grammarAccess.getFactorAccess().getCoordKeyword_3_1());
			}
		)
		    |
		(
			otherlv_7='rcv'
			{
				newLeafNode(otherlv_7, grammarAccess.getFactorAccess().getRcvKeyword_4_0());
			}
			otherlv_8='['
			{
				newLeafNode(otherlv_8, grammarAccess.getFactorAccess().getLeftSquareBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpExpressionParserRuleCall_4_2_0());
					}
					lv_exp_9_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						add(
							$current,
							"exp",
							lv_exp_9_0,
							"org.consensus.homodel.HOModel.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_10=']'
			{
				newLeafNode(otherlv_10, grammarAccess.getFactorAccess().getRightSquareBracketKeyword_4_3());
			}
			otherlv_11='.'
			{
				newLeafNode(otherlv_11, grammarAccess.getFactorAccess().getFullStopKeyword_4_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getVarVariableParserRuleCall_4_5_0());
					}
					lv_var_12_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						add(
							$current,
							"var",
							lv_var_12_0,
							"org.consensus.homodel.HOModel.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_13='('
			{
				newLeafNode(otherlv_13, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpExpressionParserRuleCall_5_1_0());
					}
					lv_exp_14_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						add(
							$current,
							"exp",
							lv_exp_14_0,
							"org.consensus.homodel.HOModel.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_15=')'
			{
				newLeafNode(otherlv_15, grammarAccess.getFactorAccess().getRightParenthesisKeyword_5_2());
			}
		)
	)
;

// Entry rule entryRuleSIMPLE_CONSTANT
entryRuleSIMPLE_CONSTANT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSIMPLE_CONSTANTRule()); }
	iv_ruleSIMPLE_CONSTANT=ruleSIMPLE_CONSTANT
	{ $current=$iv_ruleSIMPLE_CONSTANT.current.getText(); }
	EOF;

// Rule SIMPLE_CONSTANT
ruleSIMPLE_CONSTANT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='?'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSIMPLE_CONSTANTAccess().getQuestionMarkKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSIMPLE_CONSTANTAccess().getFalseKeyword_1());
		}
		    |
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSIMPLE_CONSTANTAccess().getTrueKeyword_2());
		}
		    |
		kw='EMPTY'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSIMPLE_CONSTANTAccess().getEMPTYKeyword_3());
		}
		    |
		kw='pid'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSIMPLE_CONSTANTAccess().getPidKeyword_4());
		}
		    |
		this_NUMBER_5=RULE_NUMBER
		{
			$current.merge(this_NUMBER_5);
		}
		{
			newLeafNode(this_NUMBER_5, grammarAccess.getSIMPLE_CONSTANTAccess().getNUMBERTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleINITIAL_CONST
entryRuleINITIAL_CONST returns [String current=null]:
	{ newCompositeNode(grammarAccess.getINITIAL_CONSTRule()); }
	iv_ruleINITIAL_CONST=ruleINITIAL_CONST
	{ $current=$iv_ruleINITIAL_CONST.current.getText(); }
	EOF;

// Rule INITIAL_CONST
ruleINITIAL_CONST returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getINITIAL_CONSTAccess().getSIMPLE_CONSTANTParserRuleCall_0());
		}
		this_SIMPLE_CONSTANT_0=ruleSIMPLE_CONSTANT
		{
			$current.merge(this_SIMPLE_CONSTANT_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		kw='Vp'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getINITIAL_CONSTAccess().getVpKeyword_1());
		}
	)
;

// Entry rule entryRuleCONSTANT
entryRuleCONSTANT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCONSTANTRule()); }
	iv_ruleCONSTANT=ruleCONSTANT
	{ $current=$iv_ruleCONSTANT.current.getText(); }
	EOF;

// Rule CONSTANT
ruleCONSTANT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='N'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCONSTANTAccess().getNKeyword_0());
		}
		    |
		kw='T'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCONSTANTAccess().getTKeyword_1());
		}
		    |
		kw='E'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCONSTANTAccess().getEKeyword_2());
		}
		    |
		kw='a'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCONSTANTAccess().getAKeyword_3());
		}
		    |
		kw='SIZE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCONSTANTAccess().getSIZEKeyword_4());
		}
		    |
		kw='SSIZE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCONSTANTAccess().getSSIZEKeyword_5());
		}
		    |
		kw='ASIZE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCONSTANTAccess().getASIZEKeyword_6());
		}
		    |
		kw='NULL'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCONSTANTAccess().getNULLKeyword_7());
		}
		    |
		kw='phase'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCONSTANTAccess().getPhaseKeyword_8());
		}
		    |
		kw='DECISION'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCONSTANTAccess().getDECISIONKeyword_9());
		}
		    |
		{
			newCompositeNode(grammarAccess.getCONSTANTAccess().getSIMPLE_CONSTANTParserRuleCall_10());
		}
		this_SIMPLE_CONSTANT_10=ruleSIMPLE_CONSTANT
		{
			$current.merge(this_SIMPLE_CONSTANT_10);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='V'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getVKeyword_0());
		}
		    |
		kw='V\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getVKeyword_1());
		}
		    |
		kw='TS'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getTSKeyword_2());
		}
		    |
		kw='VArray'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getVArrayKeyword_3());
		}
		    |
		kw='TSArray'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getTSArrayKeyword_4());
		}
		    |
		kw='bool'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getBoolKeyword_5());
		}
		    |
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getIntKeyword_6());
		}
		    |
		kw='intArray'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getIntArrayKeyword_7());
		}
	)
;

RULE_NUMBER : ('0'|'1'..'9' ('0'..'9')*);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
