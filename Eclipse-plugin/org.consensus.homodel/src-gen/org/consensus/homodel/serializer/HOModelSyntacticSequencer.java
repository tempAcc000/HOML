/*
 * generated by Xtext 2.26.0
 */
package org.consensus.homodel.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.consensus.homodel.services.HOModelGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class HOModelSyntacticSequencer extends AbstractSyntacticSequencer {

	protected HOModelGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Decision_Statement___AssertKeyword_5_0_LeftParenthesisKeyword_5_1___or___AssumeKeyword_4_0_LeftParenthesisKeyword_4_1___or___DECIDEKeyword_0_LeftParenthesisKeyword_1__;
	protected AbstractElementAlias match_EqualityExpression_EqualsSignEqualsSignKeyword_1_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_1;
	protected AbstractElementAlias match_Factor_CONSTANTParserRuleCall_1_1_or_CoordKeyword_3_1_or_IsCoordKeyword_2_1;
	protected AbstractElementAlias match_Message___CommaKeyword_0_1_2_0_CoordKeyword_0_1_2_1_1__a;
	protected AbstractElementAlias match_Message___CoordKeyword_0_1_2_1_1_CommaKeyword_0_1_2_0__a;
	protected AbstractElementAlias match_Message___LessThanSignKeyword_0_1_0_CoordKeyword_0_1_1_1___CommaKeyword_0_1_2_0_CoordKeyword_0_1_2_1_1__a_GreaterThanSignKeyword_0_1_3___or___LessThanSignKeyword_1_1_AckKeyword_1_2_GreaterThanSignKeyword_1_3__;
	protected AbstractElementAlias match_RelationalExpression_GreaterThanSignEqualsSignKeyword_1_0_3_or_GreaterThanSignKeyword_1_0_2_or_LessThanSignEqualsSignKeyword_1_0_1_or_LessThanSignKeyword_1_0_0;
	protected AbstractElementAlias match_SendPart_AllKeyword_0_10_5_0_or_CoordKeyword_0_10_5_1;
	protected AbstractElementAlias match_SendPart_AllKeyword_0_8_0_or_CoordKeyword_0_8_1;
	protected AbstractElementAlias match_SendPart_AllKeyword_1_4_0_or_CoordKeyword_1_4_1;
	protected AbstractElementAlias match_SimpleExpression_HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0;
	protected AbstractElementAlias match_Term_AsteriskKeyword_1_0_0_or_SolidusKeyword_1_0_1;
	protected AbstractElementAlias match_VariableDecList_HiddenKeyword_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (HOModelGrammarAccess) access;
		match_Decision_Statement___AssertKeyword_5_0_LeftParenthesisKeyword_5_1___or___AssumeKeyword_4_0_LeftParenthesisKeyword_4_1___or___DECIDEKeyword_0_LeftParenthesisKeyword_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDecisionAccess().getDECIDEKeyword_0()), new TokenAlias(false, false, grammarAccess.getDecisionAccess().getLeftParenthesisKeyword_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getAssertKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_5_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getAssumeKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_4_1())));
		match_EqualityExpression_EqualsSignEqualsSignKeyword_1_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEqualityExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getEqualityExpressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1()));
		match_Factor_CONSTANTParserRuleCall_1_1_or_CoordKeyword_3_1_or_IsCoordKeyword_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFactorAccess().getCONSTANTParserRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getFactorAccess().getCoordKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getFactorAccess().getIsCoordKeyword_2_1()));
		match_Message___CommaKeyword_0_1_2_0_CoordKeyword_0_1_2_1_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getMessageAccess().getCommaKeyword_0_1_2_0()), new TokenAlias(false, false, grammarAccess.getMessageAccess().getCoordKeyword_0_1_2_1_1()));
		match_Message___CoordKeyword_0_1_2_1_1_CommaKeyword_0_1_2_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getMessageAccess().getCoordKeyword_0_1_2_1_1()), new TokenAlias(false, false, grammarAccess.getMessageAccess().getCommaKeyword_0_1_2_0()));
		match_Message___LessThanSignKeyword_0_1_0_CoordKeyword_0_1_1_1___CommaKeyword_0_1_2_0_CoordKeyword_0_1_2_1_1__a_GreaterThanSignKeyword_0_1_3___or___LessThanSignKeyword_1_1_AckKeyword_1_2_GreaterThanSignKeyword_1_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getMessageAccess().getLessThanSignKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getMessageAccess().getCoordKeyword_0_1_1_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getMessageAccess().getCommaKeyword_0_1_2_0()), new TokenAlias(false, false, grammarAccess.getMessageAccess().getCoordKeyword_0_1_2_1_1())), new TokenAlias(false, false, grammarAccess.getMessageAccess().getGreaterThanSignKeyword_0_1_3())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getMessageAccess().getLessThanSignKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getMessageAccess().getAckKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getMessageAccess().getGreaterThanSignKeyword_1_3())));
		match_RelationalExpression_GreaterThanSignEqualsSignKeyword_1_0_3_or_GreaterThanSignKeyword_1_0_2_or_LessThanSignEqualsSignKeyword_1_0_1_or_LessThanSignKeyword_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRelationalExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_0_3()), new TokenAlias(false, false, grammarAccess.getRelationalExpressionAccess().getGreaterThanSignKeyword_1_0_2()), new TokenAlias(false, false, grammarAccess.getRelationalExpressionAccess().getLessThanSignEqualsSignKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getRelationalExpressionAccess().getLessThanSignKeyword_1_0_0()));
		match_SendPart_AllKeyword_0_10_5_0_or_CoordKeyword_0_10_5_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSendPartAccess().getAllKeyword_0_10_5_0()), new TokenAlias(false, false, grammarAccess.getSendPartAccess().getCoordKeyword_0_10_5_1()));
		match_SendPart_AllKeyword_0_8_0_or_CoordKeyword_0_8_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSendPartAccess().getAllKeyword_0_8_0()), new TokenAlias(false, false, grammarAccess.getSendPartAccess().getCoordKeyword_0_8_1()));
		match_SendPart_AllKeyword_1_4_0_or_CoordKeyword_1_4_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSendPartAccess().getAllKeyword_1_4_0()), new TokenAlias(false, false, grammarAccess.getSendPartAccess().getCoordKeyword_1_4_1()));
		match_SimpleExpression_HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSimpleExpressionAccess().getHyphenMinusKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getSimpleExpressionAccess().getPlusSignKeyword_1_0_0()));
		match_Term_AsteriskKeyword_1_0_0_or_SolidusKeyword_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTermAccess().getAsteriskKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getTermAccess().getSolidusKeyword_1_0_1()));
		match_VariableDecList_HiddenKeyword_0_q = new TokenAlias(false, true, grammarAccess.getVariableDecListAccess().getHiddenKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCONSTANTRule())
			return getCONSTANTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * CONSTANT:
	 * 	'N' | 'T' |  'E' |  'a'| 'SIZE' |  'SSIZE' | 'ASIZE' | 'NULL' |  'phase' | 'DECISION' |SIMPLE_CONSTANT 
	 * ;
	 */
	protected String getCONSTANTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "N";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Decision_Statement___AssertKeyword_5_0_LeftParenthesisKeyword_5_1___or___AssumeKeyword_4_0_LeftParenthesisKeyword_4_1___or___DECIDEKeyword_0_LeftParenthesisKeyword_1__.equals(syntax))
				emit_Decision_Statement___AssertKeyword_5_0_LeftParenthesisKeyword_5_1___or___AssumeKeyword_4_0_LeftParenthesisKeyword_4_1___or___DECIDEKeyword_0_LeftParenthesisKeyword_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EqualityExpression_EqualsSignEqualsSignKeyword_1_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_1.equals(syntax))
				emit_EqualityExpression_EqualsSignEqualsSignKeyword_1_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Factor_CONSTANTParserRuleCall_1_1_or_CoordKeyword_3_1_or_IsCoordKeyword_2_1.equals(syntax))
				emit_Factor_CONSTANTParserRuleCall_1_1_or_CoordKeyword_3_1_or_IsCoordKeyword_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message___CommaKeyword_0_1_2_0_CoordKeyword_0_1_2_1_1__a.equals(syntax))
				emit_Message___CommaKeyword_0_1_2_0_CoordKeyword_0_1_2_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message___CoordKeyword_0_1_2_1_1_CommaKeyword_0_1_2_0__a.equals(syntax))
				emit_Message___CoordKeyword_0_1_2_1_1_CommaKeyword_0_1_2_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message___LessThanSignKeyword_0_1_0_CoordKeyword_0_1_1_1___CommaKeyword_0_1_2_0_CoordKeyword_0_1_2_1_1__a_GreaterThanSignKeyword_0_1_3___or___LessThanSignKeyword_1_1_AckKeyword_1_2_GreaterThanSignKeyword_1_3__.equals(syntax))
				emit_Message___LessThanSignKeyword_0_1_0_CoordKeyword_0_1_1_1___CommaKeyword_0_1_2_0_CoordKeyword_0_1_2_1_1__a_GreaterThanSignKeyword_0_1_3___or___LessThanSignKeyword_1_1_AckKeyword_1_2_GreaterThanSignKeyword_1_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelationalExpression_GreaterThanSignEqualsSignKeyword_1_0_3_or_GreaterThanSignKeyword_1_0_2_or_LessThanSignEqualsSignKeyword_1_0_1_or_LessThanSignKeyword_1_0_0.equals(syntax))
				emit_RelationalExpression_GreaterThanSignEqualsSignKeyword_1_0_3_or_GreaterThanSignKeyword_1_0_2_or_LessThanSignEqualsSignKeyword_1_0_1_or_LessThanSignKeyword_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SendPart_AllKeyword_0_10_5_0_or_CoordKeyword_0_10_5_1.equals(syntax))
				emit_SendPart_AllKeyword_0_10_5_0_or_CoordKeyword_0_10_5_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SendPart_AllKeyword_0_8_0_or_CoordKeyword_0_8_1.equals(syntax))
				emit_SendPart_AllKeyword_0_8_0_or_CoordKeyword_0_8_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SendPart_AllKeyword_1_4_0_or_CoordKeyword_1_4_1.equals(syntax))
				emit_SendPart_AllKeyword_1_4_0_or_CoordKeyword_1_4_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SimpleExpression_HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0.equals(syntax))
				emit_SimpleExpression_HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Term_AsteriskKeyword_1_0_0_or_SolidusKeyword_1_0_1.equals(syntax))
				emit_Term_AsteriskKeyword_1_0_0_or_SolidusKeyword_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VariableDecList_HiddenKeyword_0_q.equals(syntax))
				emit_VariableDecList_HiddenKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('assume' '(') | ('assert' '(') | ('DECIDE' '(')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) exp+=ConjunctiveExpression
	 
	 * </pre>
	 */
	protected void emit_Decision_Statement___AssertKeyword_5_0_LeftParenthesisKeyword_5_1___or___AssumeKeyword_4_0_LeftParenthesisKeyword_4_1___or___DECIDEKeyword_0_LeftParenthesisKeyword_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '==' | '!='
	 *
	 * This ambiguous syntax occurs at:
	 *     exp+=RelationalExpression (ambiguity) exp+=RelationalExpression
	 
	 * </pre>
	 */
	protected void emit_EqualityExpression_EqualsSignEqualsSignKeyword_1_0_0_or_ExclamationMarkEqualsSignKeyword_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     CONSTANT | 'isCoord' | 'Coord'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_Factor_CONSTANTParserRuleCall_1_1_or_CoordKeyword_3_1_or_IsCoordKeyword_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (',' 'Coord')*
	 *
	 * This ambiguous syntax occurs at:
	 *     msg+=ID (ambiguity) '&gt;' (rule end)
	 
	 * </pre>
	 */
	protected void emit_Message___CommaKeyword_0_1_2_0_CoordKeyword_0_1_2_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('Coord' ',')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '&lt;' 'Coord' ',' (ambiguity) msg+=ID
	 *     msg+=ID ',' (ambiguity) msg+=ID
	 
	 * </pre>
	 */
	protected void emit_Message___CoordKeyword_0_1_2_1_1_CommaKeyword_0_1_2_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('&lt;' 'Coord' (',' 'Coord')* '&gt;') | ('&lt;' 'ack' '&gt;')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_Message___LessThanSignKeyword_0_1_0_CoordKeyword_0_1_1_1___CommaKeyword_0_1_2_0_CoordKeyword_0_1_2_1_1__a_GreaterThanSignKeyword_0_1_3___or___LessThanSignKeyword_1_1_AckKeyword_1_2_GreaterThanSignKeyword_1_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '&lt;' | '&lt;=' | '&gt;' | '&gt;='
	 *
	 * This ambiguous syntax occurs at:
	 *     exp+=SimpleExpression (ambiguity) exp+=SimpleExpression
	 
	 * </pre>
	 */
	protected void emit_RelationalExpression_GreaterThanSignEqualsSignKeyword_1_0_3_or_GreaterThanSignKeyword_1_0_2_or_LessThanSignEqualsSignKeyword_1_0_1_or_LessThanSignKeyword_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'All' | 'Coord'
	 *
	 * This ambiguous syntax occurs at:
	 *     message2=Message ',' (ambiguity) ')' (rule end)
	 
	 * </pre>
	 */
	protected void emit_SendPart_AllKeyword_0_10_5_0_or_CoordKeyword_0_10_5_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'All' | 'Coord'
	 *
	 * This ambiguous syntax occurs at:
	 *     message1=Message ',' (ambiguity) ')' 'else' 'send' '(' message2=Message
	 *     message1=Message ',' (ambiguity) ')' (rule end)
	 
	 * </pre>
	 */
	protected void emit_SendPart_AllKeyword_0_8_0_or_CoordKeyword_0_8_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'All' | 'Coord'
	 *
	 * This ambiguous syntax occurs at:
	 *     message=Message ',' (ambiguity) ')' (rule end)
	 
	 * </pre>
	 */
	protected void emit_SendPart_AllKeyword_1_4_0_or_CoordKeyword_1_4_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '+' | '-'
	 *
	 * This ambiguous syntax occurs at:
	 *     term+=Term (ambiguity) term+=Term
	 
	 * </pre>
	 */
	protected void emit_SimpleExpression_HyphenMinusKeyword_1_0_1_or_PlusSignKeyword_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '*' | '/'
	 *
	 * This ambiguous syntax occurs at:
	 *     factor+=Factor (ambiguity) factor+=Factor
	 
	 * </pre>
	 */
	protected void emit_Term_AsteriskKeyword_1_0_0_or_SolidusKeyword_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'hidden'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) type=Type
	 
	 * </pre>
	 */
	protected void emit_VariableDecList_HiddenKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
