/*
 * generated by Xtext 2.26.0
 */
package org.consensus.homodel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HOModelGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AlgorithmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Algorithm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariabledeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariabledeclarationVarialbeDeclarationParserRuleCall_3_0 = (RuleCall)cVariabledeclarationAssignment_3.eContents().get(0);
		private final Assignment cDomainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDomainDomainParserRuleCall_4_0 = (RuleCall)cDomainAssignment_4.eContents().get(0);
		private final Assignment cRoundlistAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRoundlistRoundListParserRuleCall_5_0 = (RuleCall)cRoundlistAssignment_5.eContents().get(0);
		private final Assignment cInvAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInvInvariantParserRuleCall_6_0 = (RuleCall)cInvAssignment_6.eContents().get(0);
		private final Assignment cUvAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cUvUnivalenceParserRuleCall_7_0 = (RuleCall)cUvAssignment_7.eContents().get(0);
		
		//Algorithm:
		//    'Algorithm' name=ID ';'
		//    variabledeclaration=VarialbeDeclaration
		//    domain=Domain?
		//    roundlist=RoundList
		//    inv=Invariant?
		//    uv=Univalence?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Algorithm' name=ID ';'
		//variabledeclaration=VarialbeDeclaration
		//domain=Domain?
		//roundlist=RoundList
		//inv=Invariant?
		//uv=Univalence?
		public Group getGroup() { return cGroup; }
		
		//'Algorithm'
		public Keyword getAlgorithmKeyword_0() { return cAlgorithmKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//variabledeclaration=VarialbeDeclaration
		public Assignment getVariabledeclarationAssignment_3() { return cVariabledeclarationAssignment_3; }
		
		//VarialbeDeclaration
		public RuleCall getVariabledeclarationVarialbeDeclarationParserRuleCall_3_0() { return cVariabledeclarationVarialbeDeclarationParserRuleCall_3_0; }
		
		//domain=Domain?
		public Assignment getDomainAssignment_4() { return cDomainAssignment_4; }
		
		//Domain
		public RuleCall getDomainDomainParserRuleCall_4_0() { return cDomainDomainParserRuleCall_4_0; }
		
		//roundlist=RoundList
		public Assignment getRoundlistAssignment_5() { return cRoundlistAssignment_5; }
		
		//RoundList
		public RuleCall getRoundlistRoundListParserRuleCall_5_0() { return cRoundlistRoundListParserRuleCall_5_0; }
		
		//inv=Invariant?
		public Assignment getInvAssignment_6() { return cInvAssignment_6; }
		
		//Invariant
		public RuleCall getInvInvariantParserRuleCall_6_0() { return cInvInvariantParserRuleCall_6_0; }
		
		//uv=Univalence?
		public Assignment getUvAssignment_7() { return cUvAssignment_7; }
		
		//Univalence
		public RuleCall getUvUnivalenceParserRuleCall_7_0() { return cUvUnivalenceParserRuleCall_7_0; }
	}
	public class VarialbeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.VarialbeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListVariableDecListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		
		//VarialbeDeclaration:
		//    'Variable' (list+=VariableDecList)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Variable' (list+=VariableDecList)+
		public Group getGroup() { return cGroup; }
		
		//'Variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//(list+=VariableDecList)+
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//VariableDecList
		public RuleCall getListVariableDecListParserRuleCall_1_0() { return cListVariableDecListParserRuleCall_1_0; }
	}
	public class VariableDecListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.VariableDecList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHiddenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cVariablenamelistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablenamelistVariableNameListParserRuleCall_2_0 = (RuleCall)cVariablenamelistAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VariableDecList:
		//    'hidden'? type=Type variablenamelist=VariableNameList ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'hidden'? type=Type variablenamelist=VariableNameList ';'
		public Group getGroup() { return cGroup; }
		
		//'hidden'?
		public Keyword getHiddenKeyword_0() { return cHiddenKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//variablenamelist=VariableNameList
		public Assignment getVariablenamelistAssignment_2() { return cVariablenamelistAssignment_2; }
		
		//VariableNameList
		public RuleCall getVariablenamelistVariableNameListParserRuleCall_2_0() { return cVariablenamelistVariableNameListParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VariableNameListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.VariableNameList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINITIAL_CONSTParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cValueAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cValueINITIAL_CONSTParserRuleCall_2_2_1_0 = (RuleCall)cValueAssignment_2_2_1.eContents().get(0);
		
		//VariableNameList:
		//    name+=ID ('=' value+=INITIAL_CONST)? (','name+=ID ('=' value+=INITIAL_CONST)?)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=ID ('=' value+=INITIAL_CONST)? (','name+=ID ('=' value+=INITIAL_CONST)?)*
		public Group getGroup() { return cGroup; }
		
		//name+=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('=' value+=INITIAL_CONST)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//value+=INITIAL_CONST
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INITIAL_CONST
		public RuleCall getValueINITIAL_CONSTParserRuleCall_1_1_0() { return cValueINITIAL_CONSTParserRuleCall_1_1_0; }
		
		//(','name+=ID ('=' value+=INITIAL_CONST)?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//name+=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//('=' value+=INITIAL_CONST)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_2_0() { return cEqualsSignKeyword_2_2_0; }
		
		//value+=INITIAL_CONST
		public Assignment getValueAssignment_2_2_1() { return cValueAssignment_2_2_1; }
		
		//INITIAL_CONST
		public RuleCall getValueINITIAL_CONSTParserRuleCall_2_2_1_0() { return cValueINITIAL_CONSTParserRuleCall_2_2_1_0; }
	}
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Domain:
		//    'Domain' '{'
		//        StatementList
		//    '}' ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Domain' '{'
		//    StatementList
		//'}' ';'
		public Group getGroup() { return cGroup; }
		
		//'Domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class RoundListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.RoundList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRoundRoundParserRuleCall_0_0 = (RuleCall)cRoundAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RoundList:
		//    (round+=Round ';')+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(round+=Round ';')+
		public Group getGroup() { return cGroup; }
		
		//round+=Round
		public Assignment getRoundAssignment_0() { return cRoundAssignment_0; }
		
		//Round
		public RuleCall getRoundRoundParserRuleCall_0_0() { return cRoundRoundParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class RoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Round");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoundKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSendPartKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSendAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSendSendPartParserRuleCall_3_0 = (RuleCall)cSendAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTransitionPartKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTransitionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTransitionTransitionPartParserRuleCall_6_0 = (RuleCall)cTransitionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Round:
		//    'Round' '{'
		//    'SendPart' send=SendPart ';'
		//    'TransitionPart' transition=TransitionPart
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Round' '{'
		//'SendPart' send=SendPart ';'
		//'TransitionPart' transition=TransitionPart
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Round'
		public Keyword getRoundKeyword_0() { return cRoundKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'SendPart'
		public Keyword getSendPartKeyword_2() { return cSendPartKeyword_2; }
		
		//send=SendPart
		public Assignment getSendAssignment_3() { return cSendAssignment_3; }
		
		//SendPart
		public RuleCall getSendSendPartParserRuleCall_3_0() { return cSendSendPartParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//'TransitionPart'
		public Keyword getTransitionPartKeyword_5() { return cTransitionPartKeyword_5; }
		
		//transition=TransitionPart
		public Assignment getTransitionAssignment_6() { return cTransitionAssignment_6; }
		
		//TransitionPart
		public RuleCall getTransitionTransitionPartParserRuleCall_6_0() { return cTransitionTransitionPartParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class SendPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.SendPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_0_2_0 = (RuleCall)cExpAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cSendKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cMessage1Assignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cMessage1MessageParserRuleCall_0_6_0 = (RuleCall)cMessage1Assignment_0_6.eContents().get(0);
		private final Keyword cCommaKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Alternatives cAlternatives_0_8 = (Alternatives)cGroup_0.eContents().get(8);
		private final Keyword cAllKeyword_0_8_0 = (Keyword)cAlternatives_0_8.eContents().get(0);
		private final Keyword cCoordKeyword_0_8_1 = (Keyword)cAlternatives_0_8.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_9 = (Keyword)cGroup_0.eContents().get(9);
		private final Group cGroup_0_10 = (Group)cGroup_0.eContents().get(10);
		private final Keyword cElseKeyword_0_10_0 = (Keyword)cGroup_0_10.eContents().get(0);
		private final Keyword cSendKeyword_0_10_1 = (Keyword)cGroup_0_10.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_10_2 = (Keyword)cGroup_0_10.eContents().get(2);
		private final Assignment cMessage2Assignment_0_10_3 = (Assignment)cGroup_0_10.eContents().get(3);
		private final RuleCall cMessage2MessageParserRuleCall_0_10_3_0 = (RuleCall)cMessage2Assignment_0_10_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_10_4 = (Keyword)cGroup_0_10.eContents().get(4);
		private final Alternatives cAlternatives_0_10_5 = (Alternatives)cGroup_0_10.eContents().get(5);
		private final Keyword cAllKeyword_0_10_5_0 = (Keyword)cAlternatives_0_10_5.eContents().get(0);
		private final Keyword cCoordKeyword_0_10_5_1 = (Keyword)cAlternatives_0_10_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_10_6 = (Keyword)cGroup_0_10.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSendKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMessageAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMessageMessageParserRuleCall_1_2_0 = (RuleCall)cMessageAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Keyword cAllKeyword_1_4_0 = (Keyword)cAlternatives_1_4.eContents().get(0);
		private final Keyword cCoordKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//SendPart:
		//    'if' '(' exp=Expression ')' 'send' '(' message1=Message ',' ('All' | 'Coord') ')'
		//             ( 'else'  'send'  '('message2=Message ',' ('All' | 'Coord') ')' )? |
		//             'send' '(' message=Message ',' ('All' | 'Coord') ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' exp=Expression ')' 'send' '(' message1=Message ',' ('All' | 'Coord') ')'
		//         ( 'else'  'send'  '('message2=Message ',' ('All' | 'Coord') ')' )? |
		//         'send' '(' message=Message ',' ('All' | 'Coord') ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'if' '(' exp=Expression ')' 'send' '(' message1=Message ',' ('All' | 'Coord') ')'
		//         ( 'else'  'send'  '('message2=Message ',' ('All' | 'Coord') ')' )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'if'
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_0_2() { return cExpAssignment_0_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_2_0() { return cExpExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'send'
		public Keyword getSendKeyword_0_4() { return cSendKeyword_0_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_5() { return cLeftParenthesisKeyword_0_5; }
		
		//message1=Message
		public Assignment getMessage1Assignment_0_6() { return cMessage1Assignment_0_6; }
		
		//Message
		public RuleCall getMessage1MessageParserRuleCall_0_6_0() { return cMessage1MessageParserRuleCall_0_6_0; }
		
		//','
		public Keyword getCommaKeyword_0_7() { return cCommaKeyword_0_7; }
		
		//('All' | 'Coord')
		public Alternatives getAlternatives_0_8() { return cAlternatives_0_8; }
		
		//'All'
		public Keyword getAllKeyword_0_8_0() { return cAllKeyword_0_8_0; }
		
		//'Coord'
		public Keyword getCoordKeyword_0_8_1() { return cCoordKeyword_0_8_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_9() { return cRightParenthesisKeyword_0_9; }
		
		//( 'else'  'send'  '('message2=Message ',' ('All' | 'Coord') ')' )?
		public Group getGroup_0_10() { return cGroup_0_10; }
		
		//'else'
		public Keyword getElseKeyword_0_10_0() { return cElseKeyword_0_10_0; }
		
		//'send'
		public Keyword getSendKeyword_0_10_1() { return cSendKeyword_0_10_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_10_2() { return cLeftParenthesisKeyword_0_10_2; }
		
		//message2=Message
		public Assignment getMessage2Assignment_0_10_3() { return cMessage2Assignment_0_10_3; }
		
		//Message
		public RuleCall getMessage2MessageParserRuleCall_0_10_3_0() { return cMessage2MessageParserRuleCall_0_10_3_0; }
		
		//','
		public Keyword getCommaKeyword_0_10_4() { return cCommaKeyword_0_10_4; }
		
		//('All' | 'Coord')
		public Alternatives getAlternatives_0_10_5() { return cAlternatives_0_10_5; }
		
		//'All'
		public Keyword getAllKeyword_0_10_5_0() { return cAllKeyword_0_10_5_0; }
		
		//'Coord'
		public Keyword getCoordKeyword_0_10_5_1() { return cCoordKeyword_0_10_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_10_6() { return cRightParenthesisKeyword_0_10_6; }
		
		//'send' '(' message=Message ',' ('All' | 'Coord') ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'send'
		public Keyword getSendKeyword_1_0() { return cSendKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//message=Message
		public Assignment getMessageAssignment_1_2() { return cMessageAssignment_1_2; }
		
		//Message
		public RuleCall getMessageMessageParserRuleCall_1_2_0() { return cMessageMessageParserRuleCall_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }
		
		//('All' | 'Coord')
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//'All'
		public Keyword getAllKeyword_1_4_0() { return cAllKeyword_1_4_0; }
		
		//'Coord'
		public Keyword getCoordKeyword_1_4_1() { return cCoordKeyword_1_4_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMessageAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Assignment cMsgAssignment_0_1_1_0 = (Assignment)cAlternatives_0_1_1.eContents().get(0);
		private final RuleCall cMsgIDTerminalRuleCall_0_1_1_0_0 = (RuleCall)cMsgAssignment_0_1_1_0.eContents().get(0);
		private final Keyword cCoordKeyword_0_1_1_1 = (Keyword)cAlternatives_0_1_1.eContents().get(1);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Alternatives cAlternatives_0_1_2_1 = (Alternatives)cGroup_0_1_2.eContents().get(1);
		private final Assignment cMsgAssignment_0_1_2_1_0 = (Assignment)cAlternatives_0_1_2_1.eContents().get(0);
		private final RuleCall cMsgIDTerminalRuleCall_0_1_2_1_0_0 = (RuleCall)cMsgAssignment_0_1_2_1_0.eContents().get(0);
		private final Keyword cCoordKeyword_0_1_2_1_1 = (Keyword)cAlternatives_0_1_2_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMessageAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cAckKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Message:
		//     {Message} ('<'  ( msg+=ID | 'Coord')  ( ',' ( msg+=ID | 'Coord') )* '>') |
		//     {Message} '<' 'ack' '>'
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Message} ('<'  ( msg+=ID | 'Coord')  ( ',' ( msg+=ID | 'Coord') )* '>') |
		//{Message} '<' 'ack' '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Message} ('<'  ( msg+=ID | 'Coord')  ( ',' ( msg+=ID | 'Coord') )* '>')
		public Group getGroup_0() { return cGroup_0; }
		
		//{Message}
		public Action getMessageAction_0_0() { return cMessageAction_0_0; }
		
		//('<'  ( msg+=ID | 'Coord')  ( ',' ( msg+=ID | 'Coord') )* '>')
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1_0() { return cLessThanSignKeyword_0_1_0; }
		
		//( msg+=ID | 'Coord')
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }
		
		//msg+=ID
		public Assignment getMsgAssignment_0_1_1_0() { return cMsgAssignment_0_1_1_0; }
		
		//ID
		public RuleCall getMsgIDTerminalRuleCall_0_1_1_0_0() { return cMsgIDTerminalRuleCall_0_1_1_0_0; }
		
		//'Coord'
		public Keyword getCoordKeyword_0_1_1_1() { return cCoordKeyword_0_1_1_1; }
		
		//( ',' ( msg+=ID | 'Coord') )*
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//','
		public Keyword getCommaKeyword_0_1_2_0() { return cCommaKeyword_0_1_2_0; }
		
		//( msg+=ID | 'Coord')
		public Alternatives getAlternatives_0_1_2_1() { return cAlternatives_0_1_2_1; }
		
		//msg+=ID
		public Assignment getMsgAssignment_0_1_2_1_0() { return cMsgAssignment_0_1_2_1_0; }
		
		//ID
		public RuleCall getMsgIDTerminalRuleCall_0_1_2_1_0_0() { return cMsgIDTerminalRuleCall_0_1_2_1_0_0; }
		
		//'Coord'
		public Keyword getCoordKeyword_0_1_2_1_1() { return cCoordKeyword_0_1_2_1_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_1_3() { return cGreaterThanSignKeyword_0_1_3; }
		
		//{Message} '<' 'ack' '>'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Message}
		public Action getMessageAction_1_0() { return cMessageAction_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }
		
		//'ack'
		public Keyword getAckKeyword_1_2() { return cAckKeyword_1_2; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}
	public class TransitionPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.TransitionPart");
		private final RuleCall cStatementListParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TransitionPart:
		//    StatementList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall() { return cStatementListParserRuleCall; }
	}
	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Invariant:
		//    'Invariant' '{'
		//    StatementList
		//    '}' ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Invariant' '{'
		//StatementList
		//'}' ';'
		public Group getGroup() { return cGroup; }
		
		//'Invariant'
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class UnivalenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Univalence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnivalenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Univalence:
		//    'Univalence' '{'
		//    StatementList
		//    '}' ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Univalence' '{'
		//StatementList
		//'}' ';'
		public Group getGroup() { return cGroup; }
		
		//'Univalence'
		public Keyword getUnivalenceKeyword_0() { return cUnivalenceKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_1_0_0 = (RuleCall)cStatementsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//StatementList:
		//    {StatementList} ( statements+=Statement ';')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementList} ( statements+=Statement ';')*
		public Group getGroup() { return cGroup; }
		
		//{StatementList}
		public Action getStatementListAction_0() { return cStatementListAction_0; }
		
		//( statements+=Statement ';')*
		public Group getGroup_1() { return cGroup_1; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_1_0() { return cStatementsAssignment_1_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0_0() { return cStatementsStatementParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecisionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cVarAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cVarVariableParserRuleCall_2_2_0 = (RuleCall)cVarAssignment_2_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cExpAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cExpExpressionParserRuleCall_2_4_0 = (RuleCall)cExpAssignment_2_4.eContents().get(0);
		private final Keyword cToKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cExpAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cExpExpressionParserRuleCall_2_6_0 = (RuleCall)cExpAssignment_2_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Assignment cStatementAssignment_2_8 = (Assignment)cGroup_2.eContents().get(8);
		private final RuleCall cStatementStatementParserRuleCall_2_8_0 = (RuleCall)cStatementAssignment_2_8.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_3_2_0 = (RuleCall)cExpAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cStatementAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_3_4_0 = (RuleCall)cStatementAssignment_3_4.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cGroup_3.eContents().get(5);
		private final Keyword cElseKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cStatementAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_3_5_1_0 = (RuleCall)cStatementAssignment_3_5_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cAssumeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cAssertKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cStatementListParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//Statement:
		//    Assignment |
		//    Decision |
		//    'for'  '[' var+=Variable  '='  exp+=Expression  'to' exp+=Expression  ']' statement+=Statement |
		//    'if' '(' exp+=Expression ')'  statement+=Statement  ( 'else'  statement+=Statement )? |
		//    'assume' '(' Expression ')' |
		//    'assert' '(' Expression ')' |
		//    '{' StatementList '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment |
		//Decision |
		//'for'  '[' var+=Variable  '='  exp+=Expression  'to' exp+=Expression  ']' statement+=Statement |
		//'if' '(' exp+=Expression ')'  statement+=Statement  ( 'else'  statement+=Statement )? |
		//'assume' '(' Expression ')' |
		//'assert' '(' Expression ')' |
		//'{' StatementList '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//Decision
		public RuleCall getDecisionParserRuleCall_1() { return cDecisionParserRuleCall_1; }
		
		//'for'  '[' var+=Variable  '='  exp+=Expression  'to' exp+=Expression  ']' statement+=Statement
		public Group getGroup_2() { return cGroup_2; }
		
		//'for'
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//var+=Variable
		public Assignment getVarAssignment_2_2() { return cVarAssignment_2_2; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_2_2_0() { return cVarVariableParserRuleCall_2_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_3() { return cEqualsSignKeyword_2_3; }
		
		//exp+=Expression
		public Assignment getExpAssignment_2_4() { return cExpAssignment_2_4; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_4_0() { return cExpExpressionParserRuleCall_2_4_0; }
		
		//'to'
		public Keyword getToKeyword_2_5() { return cToKeyword_2_5; }
		
		//exp+=Expression
		public Assignment getExpAssignment_2_6() { return cExpAssignment_2_6; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_6_0() { return cExpExpressionParserRuleCall_2_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_7() { return cRightSquareBracketKeyword_2_7; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_2_8() { return cStatementAssignment_2_8; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_8_0() { return cStatementStatementParserRuleCall_2_8_0; }
		
		//'if' '(' exp+=Expression ')'  statement+=Statement  ( 'else'  statement+=Statement )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'if'
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//exp+=Expression
		public Assignment getExpAssignment_3_2() { return cExpAssignment_3_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_2_0() { return cExpExpressionParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_3_4() { return cStatementAssignment_3_4; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_4_0() { return cStatementStatementParserRuleCall_3_4_0; }
		
		//( 'else'  statement+=Statement )?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'else'
		public Keyword getElseKeyword_3_5_0() { return cElseKeyword_3_5_0; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_3_5_1() { return cStatementAssignment_3_5_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_5_1_0() { return cStatementStatementParserRuleCall_3_5_1_0; }
		
		//'assume' '(' Expression ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'assume'
		public Keyword getAssumeKeyword_4_0() { return cAssumeKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_4_2() { return cExpressionParserRuleCall_4_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//'assert' '(' Expression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'assert'
		public Keyword getAssertKeyword_5_0() { return cAssertKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_5_2() { return cExpressionParserRuleCall_5_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//'{' StatementList '}'
		public Group getGroup_6() { return cGroup_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_6_1() { return cStatementListParserRuleCall_6_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVariableParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Assignment:
		//    var+=Variable '=' exp+=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var+=Variable '=' exp+=Expression
		public Group getGroup() { return cGroup; }
		
		//var+=Variable
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_0_0() { return cVarVariableParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//exp+=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//    NormalVariable|ArrayVariable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NormalVariable|ArrayVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NormalVariable
		public RuleCall getNormalVariableParserRuleCall_0() { return cNormalVariableParserRuleCall_0; }
		
		//ArrayVariable
		public RuleCall getArrayVariableParserRuleCall_1() { return cArrayVariableParserRuleCall_1; }
	}
	public class NormalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.NormalVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//NormalVariable:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ArrayVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.ArrayVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayVariable:
		//    name=ID '['exp+=Expression']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '['exp+=Expression']'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//exp+=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class DecisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Decision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDECIDEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Decision:
		//    'DECIDE' '(' Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'DECIDE' '(' Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'DECIDE'
		public Keyword getDECIDEKeyword_0() { return cDECIDEKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpConjunctiveExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpConjunctiveExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		//Expression:
		//    exp+=ConjunctiveExpression ('||' exp+=ConjunctiveExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//exp+=ConjunctiveExpression ('||' exp+=ConjunctiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//exp+=ConjunctiveExpression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//ConjunctiveExpression
		public RuleCall getExpConjunctiveExpressionParserRuleCall_0_0() { return cExpConjunctiveExpressionParserRuleCall_0_0; }
		
		//('||' exp+=ConjunctiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }
		
		//exp+=ConjunctiveExpression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//ConjunctiveExpression
		public RuleCall getExpConjunctiveExpressionParserRuleCall_1_1_0() { return cExpConjunctiveExpressionParserRuleCall_1_1_0; }
	}
	public class ConjunctiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.ConjunctiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpEqualityExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		//ConjunctiveExpression:
		//    exp+=EqualityExpression ('&&' exp+=EqualityExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//exp+=EqualityExpression ('&&' exp+=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//exp+=EqualityExpression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//EqualityExpression
		public RuleCall getExpEqualityExpressionParserRuleCall_0_0() { return cExpEqualityExpressionParserRuleCall_0_0; }
		
		//('&&' exp+=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }
		
		//exp+=EqualityExpression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//EqualityExpression
		public RuleCall getExpEqualityExpressionParserRuleCall_1_1_0() { return cExpEqualityExpressionParserRuleCall_1_1_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpRelationalExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		//EqualityExpression:
		//    exp+=RelationalExpression (('=='|'!=') exp+=RelationalExpression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//exp+=RelationalExpression (('=='|'!=') exp+=RelationalExpression)?
		public Group getGroup() { return cGroup; }
		
		//exp+=RelationalExpression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//RelationalExpression
		public RuleCall getExpRelationalExpressionParserRuleCall_0_0() { return cExpRelationalExpressionParserRuleCall_0_0; }
		
		//(('=='|'!=') exp+=RelationalExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//('=='|'!=')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_1; }
		
		//exp+=RelationalExpression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//RelationalExpression
		public RuleCall getExpRelationalExpressionParserRuleCall_1_1_0() { return cExpRelationalExpressionParserRuleCall_1_1_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpSimpleExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpSimpleExpressionParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		//RelationalExpression:
		//    exp+=SimpleExpression (('<'|'<='|'>'|'>=') exp+=SimpleExpression)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//exp+=SimpleExpression (('<'|'<='|'>'|'>=') exp+=SimpleExpression)?
		public Group getGroup() { return cGroup; }
		
		//exp+=SimpleExpression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//SimpleExpression
		public RuleCall getExpSimpleExpressionParserRuleCall_0_0() { return cExpSimpleExpressionParserRuleCall_0_0; }
		
		//(('<'|'<='|'>'|'>=') exp+=SimpleExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//('<'|'<='|'>'|'>=')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_0() { return cLessThanSignKeyword_1_0_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_1() { return cLessThanSignEqualsSignKeyword_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_2() { return cGreaterThanSignKeyword_1_0_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_3() { return cGreaterThanSignEqualsSignKeyword_1_0_3; }
		
		//exp+=SimpleExpression
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//SimpleExpression
		public RuleCall getExpSimpleExpressionParserRuleCall_1_1_0() { return cExpSimpleExpressionParserRuleCall_1_1_0; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.SimpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermTermParserRuleCall_0_0 = (RuleCall)cTermAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cTermAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_1_0 = (RuleCall)cTermAssignment_1_1.eContents().get(0);
		
		//SimpleExpression:
		//    term+=Term (('+'|'-') term+=Term)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//term+=Term (('+'|'-') term+=Term)*
		public Group getGroup() { return cGroup; }
		
		//term+=Term
		public Assignment getTermAssignment_0() { return cTermAssignment_0; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_0_0() { return cTermTermParserRuleCall_0_0; }
		
		//(('+'|'-') term+=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+'|'-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }
		
		//term+=Term
		public Assignment getTermAssignment_1_1() { return cTermAssignment_1_1; }
		
		//Term
		public RuleCall getTermTermParserRuleCall_1_1_0() { return cTermTermParserRuleCall_1_1_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFactorFactorParserRuleCall_0_0 = (RuleCall)cFactorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cFactorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFactorFactorParserRuleCall_1_1_0 = (RuleCall)cFactorAssignment_1_1.eContents().get(0);
		
		//Term:
		//    factor+=Factor (('*'|'/') factor+=Factor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//factor+=Factor (('*'|'/') factor+=Factor)*
		public Group getGroup() { return cGroup; }
		
		//factor+=Factor
		public Assignment getFactorAssignment_0() { return cFactorAssignment_0; }
		
		//Factor
		public RuleCall getFactorFactorParserRuleCall_0_0() { return cFactorFactorParserRuleCall_0_0; }
		
		//(('*'|'/') factor+=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('*'|'/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }
		
		//factor+=Factor
		public Assignment getFactorAssignment_1_1() { return cFactorAssignment_1_1; }
		
		//Factor
		public RuleCall getFactorFactorParserRuleCall_1_1_0() { return cFactorFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFactorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cCONSTANTParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFactorAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cIsCoordKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cFactorAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cCoordKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cRcvKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExpAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_4_2_0 = (RuleCall)cExpAssignment_4_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cFullStopKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cVarAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cVarVariableParserRuleCall_4_5_0 = (RuleCall)cVarAssignment_4_5.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_5_1_0 = (RuleCall)cExpAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Factor:
		//    Variable|
		//    {Factor} CONSTANT|
		//    {Factor} 'isCoord'|
		//    {Factor} 'Coord'|
		//     ('rcv' '[' exp+=Expression ']''.'var+=Variable)|
		//    '('exp+=Expression')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable|
		//{Factor} CONSTANT|
		//{Factor} 'isCoord'|
		//{Factor} 'Coord'|
		// ('rcv' '[' exp+=Expression ']''.'var+=Variable)|
		//'('exp+=Expression')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//{Factor} CONSTANT
		public Group getGroup_1() { return cGroup_1; }
		
		//{Factor}
		public Action getFactorAction_1_0() { return cFactorAction_1_0; }
		
		//CONSTANT
		public RuleCall getCONSTANTParserRuleCall_1_1() { return cCONSTANTParserRuleCall_1_1; }
		
		//{Factor} 'isCoord'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Factor}
		public Action getFactorAction_2_0() { return cFactorAction_2_0; }
		
		//'isCoord'
		public Keyword getIsCoordKeyword_2_1() { return cIsCoordKeyword_2_1; }
		
		//{Factor} 'Coord'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Factor}
		public Action getFactorAction_3_0() { return cFactorAction_3_0; }
		
		//'Coord'
		public Keyword getCoordKeyword_3_1() { return cCoordKeyword_3_1; }
		
		//('rcv' '[' exp+=Expression ']''.'var+=Variable)
		public Group getGroup_4() { return cGroup_4; }
		
		//'rcv'
		public Keyword getRcvKeyword_4_0() { return cRcvKeyword_4_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_1() { return cLeftSquareBracketKeyword_4_1; }
		
		//exp+=Expression
		public Assignment getExpAssignment_4_2() { return cExpAssignment_4_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_4_2_0() { return cExpExpressionParserRuleCall_4_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
		
		//'.'
		public Keyword getFullStopKeyword_4_4() { return cFullStopKeyword_4_4; }
		
		//var+=Variable
		public Assignment getVarAssignment_4_5() { return cVarAssignment_4_5; }
		
		//Variable
		public RuleCall getVarVariableParserRuleCall_4_5_0() { return cVarVariableParserRuleCall_4_5_0; }
		
		//'('exp+=Expression')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//exp+=Expression
		public Assignment getExpAssignment_5_1() { return cExpAssignment_5_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_5_1_0() { return cExpExpressionParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	public class SIMPLE_CONSTANTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.SIMPLE_CONSTANT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTrueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEMPTYKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPidKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final RuleCall cNUMBERTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//SIMPLE_CONSTANT:
		//    '?' | 'false' | 'true' |'EMPTY' | 'pid' | NUMBER
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'?' | 'false' | 'true' |'EMPTY' | 'pid' | NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
		
		//'true'
		public Keyword getTrueKeyword_2() { return cTrueKeyword_2; }
		
		//'EMPTY'
		public Keyword getEMPTYKeyword_3() { return cEMPTYKeyword_3; }
		
		//'pid'
		public Keyword getPidKeyword_4() { return cPidKeyword_4; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_5() { return cNUMBERTerminalRuleCall_5; }
	}
	public class INITIAL_CONSTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.INITIAL_CONST");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSIMPLE_CONSTANTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cVpKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//INITIAL_CONST:
		//    SIMPLE_CONSTANT|'Vp'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SIMPLE_CONSTANT|'Vp'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SIMPLE_CONSTANT
		public RuleCall getSIMPLE_CONSTANTParserRuleCall_0() { return cSIMPLE_CONSTANTParserRuleCall_0; }
		
		//'Vp'
		public Keyword getVpKeyword_1() { return cVpKeyword_1; }
	}
	public class CONSTANTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.CONSTANT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSIZEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSSIZEKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cASIZEKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNULLKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cPhaseKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDECISIONKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final RuleCall cSIMPLE_CONSTANTParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//CONSTANT:
		//    'N' | 'T' |  'E' |  'a'| 'SIZE' |  'SSIZE' | 'ASIZE' | 'NULL' |  'phase' | 'DECISION' |SIMPLE_CONSTANT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'N' | 'T' |  'E' |  'a'| 'SIZE' |  'SSIZE' | 'ASIZE' | 'NULL' |  'phase' | 'DECISION' |SIMPLE_CONSTANT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'N'
		public Keyword getNKeyword_0() { return cNKeyword_0; }
		
		//'T'
		public Keyword getTKeyword_1() { return cTKeyword_1; }
		
		//'E'
		public Keyword getEKeyword_2() { return cEKeyword_2; }
		
		//'a'
		public Keyword getAKeyword_3() { return cAKeyword_3; }
		
		//'SIZE'
		public Keyword getSIZEKeyword_4() { return cSIZEKeyword_4; }
		
		//'SSIZE'
		public Keyword getSSIZEKeyword_5() { return cSSIZEKeyword_5; }
		
		//'ASIZE'
		public Keyword getASIZEKeyword_6() { return cASIZEKeyword_6; }
		
		//'NULL'
		public Keyword getNULLKeyword_7() { return cNULLKeyword_7; }
		
		//'phase'
		public Keyword getPhaseKeyword_8() { return cPhaseKeyword_8; }
		
		//'DECISION'
		public Keyword getDECISIONKeyword_9() { return cDECISIONKeyword_9; }
		
		//SIMPLE_CONSTANT
		public RuleCall getSIMPLE_CONSTANTParserRuleCall_10() { return cSIMPLE_CONSTANTParserRuleCall_10; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVArrayKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTSArrayKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBoolKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIntKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cIntArrayKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//Type:
		//    'V' | "V\'" | 'TS' | 'VArray' | 'TSArray' |'bool' | 'int' | 'intArray'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'V' | "V\'" | 'TS' | 'VArray' | 'TSArray' |'bool' | 'int' | 'intArray'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'V'
		public Keyword getVKeyword_0() { return cVKeyword_0; }
		
		//"V\'"
		public Keyword getVKeyword_1() { return cVKeyword_1; }
		
		//'TS'
		public Keyword getTSKeyword_2() { return cTSKeyword_2; }
		
		//'VArray'
		public Keyword getVArrayKeyword_3() { return cVArrayKeyword_3; }
		
		//'TSArray'
		public Keyword getTSArrayKeyword_4() { return cTSArrayKeyword_4; }
		
		//'bool'
		public Keyword getBoolKeyword_5() { return cBoolKeyword_5; }
		
		//'int'
		public Keyword getIntKeyword_6() { return cIntKeyword_6; }
		
		//'intArray'
		public Keyword getIntArrayKeyword_7() { return cIntArrayKeyword_7; }
	}
	
	
	private final AlgorithmElements pAlgorithm;
	private final VarialbeDeclarationElements pVarialbeDeclaration;
	private final VariableDecListElements pVariableDecList;
	private final VariableNameListElements pVariableNameList;
	private final DomainElements pDomain;
	private final RoundListElements pRoundList;
	private final RoundElements pRound;
	private final SendPartElements pSendPart;
	private final MessageElements pMessage;
	private final TransitionPartElements pTransitionPart;
	private final InvariantElements pInvariant;
	private final UnivalenceElements pUnivalence;
	private final StatementListElements pStatementList;
	private final StatementElements pStatement;
	private final AssignmentElements pAssignment;
	private final VariableElements pVariable;
	private final NormalVariableElements pNormalVariable;
	private final ArrayVariableElements pArrayVariable;
	private final DecisionElements pDecision;
	private final ExpressionElements pExpression;
	private final ConjunctiveExpressionElements pConjunctiveExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final SimpleExpressionElements pSimpleExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final SIMPLE_CONSTANTElements pSIMPLE_CONSTANT;
	private final INITIAL_CONSTElements pINITIAL_CONST;
	private final CONSTANTElements pCONSTANT;
	private final TerminalRule tNUMBER;
	private final TypeElements pType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HOModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAlgorithm = new AlgorithmElements();
		this.pVarialbeDeclaration = new VarialbeDeclarationElements();
		this.pVariableDecList = new VariableDecListElements();
		this.pVariableNameList = new VariableNameListElements();
		this.pDomain = new DomainElements();
		this.pRoundList = new RoundListElements();
		this.pRound = new RoundElements();
		this.pSendPart = new SendPartElements();
		this.pMessage = new MessageElements();
		this.pTransitionPart = new TransitionPartElements();
		this.pInvariant = new InvariantElements();
		this.pUnivalence = new UnivalenceElements();
		this.pStatementList = new StatementListElements();
		this.pStatement = new StatementElements();
		this.pAssignment = new AssignmentElements();
		this.pVariable = new VariableElements();
		this.pNormalVariable = new NormalVariableElements();
		this.pArrayVariable = new ArrayVariableElements();
		this.pDecision = new DecisionElements();
		this.pExpression = new ExpressionElements();
		this.pConjunctiveExpression = new ConjunctiveExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pSIMPLE_CONSTANT = new SIMPLE_CONSTANTElements();
		this.pINITIAL_CONST = new INITIAL_CONSTElements();
		this.pCONSTANT = new CONSTANTElements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.consensus.homodel.HOModel.NUMBER");
		this.pType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.consensus.homodel.HOModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Algorithm:
	//    'Algorithm' name=ID ';'
	//    variabledeclaration=VarialbeDeclaration
	//    domain=Domain?
	//    roundlist=RoundList
	//    inv=Invariant?
	//    uv=Univalence?
	//;
	public AlgorithmElements getAlgorithmAccess() {
		return pAlgorithm;
	}
	
	public ParserRule getAlgorithmRule() {
		return getAlgorithmAccess().getRule();
	}
	
	//VarialbeDeclaration:
	//    'Variable' (list+=VariableDecList)+
	//;
	public VarialbeDeclarationElements getVarialbeDeclarationAccess() {
		return pVarialbeDeclaration;
	}
	
	public ParserRule getVarialbeDeclarationRule() {
		return getVarialbeDeclarationAccess().getRule();
	}
	
	//VariableDecList:
	//    'hidden'? type=Type variablenamelist=VariableNameList ';'
	//;
	public VariableDecListElements getVariableDecListAccess() {
		return pVariableDecList;
	}
	
	public ParserRule getVariableDecListRule() {
		return getVariableDecListAccess().getRule();
	}
	
	//VariableNameList:
	//    name+=ID ('=' value+=INITIAL_CONST)? (','name+=ID ('=' value+=INITIAL_CONST)?)*
	//;
	public VariableNameListElements getVariableNameListAccess() {
		return pVariableNameList;
	}
	
	public ParserRule getVariableNameListRule() {
		return getVariableNameListAccess().getRule();
	}
	
	//Domain:
	//    'Domain' '{'
	//        StatementList
	//    '}' ';'
	//;
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}
	
	//RoundList:
	//    (round+=Round ';')+
	//;
	public RoundListElements getRoundListAccess() {
		return pRoundList;
	}
	
	public ParserRule getRoundListRule() {
		return getRoundListAccess().getRule();
	}
	
	//Round:
	//    'Round' '{'
	//    'SendPart' send=SendPart ';'
	//    'TransitionPart' transition=TransitionPart
	//    '}'
	//;
	public RoundElements getRoundAccess() {
		return pRound;
	}
	
	public ParserRule getRoundRule() {
		return getRoundAccess().getRule();
	}
	
	//SendPart:
	//    'if' '(' exp=Expression ')' 'send' '(' message1=Message ',' ('All' | 'Coord') ')'
	//             ( 'else'  'send'  '('message2=Message ',' ('All' | 'Coord') ')' )? |
	//             'send' '(' message=Message ',' ('All' | 'Coord') ')'
	//;
	public SendPartElements getSendPartAccess() {
		return pSendPart;
	}
	
	public ParserRule getSendPartRule() {
		return getSendPartAccess().getRule();
	}
	
	//Message:
	//     {Message} ('<'  ( msg+=ID | 'Coord')  ( ',' ( msg+=ID | 'Coord') )* '>') |
	//     {Message} '<' 'ack' '>'
	// ;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//TransitionPart:
	//    StatementList
	//;
	public TransitionPartElements getTransitionPartAccess() {
		return pTransitionPart;
	}
	
	public ParserRule getTransitionPartRule() {
		return getTransitionPartAccess().getRule();
	}
	
	//Invariant:
	//    'Invariant' '{'
	//    StatementList
	//    '}' ';'
	//;
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}
	
	//Univalence:
	//    'Univalence' '{'
	//    StatementList
	//    '}' ';'
	//;
	public UnivalenceElements getUnivalenceAccess() {
		return pUnivalence;
	}
	
	public ParserRule getUnivalenceRule() {
		return getUnivalenceAccess().getRule();
	}
	
	//StatementList:
	//    {StatementList} ( statements+=Statement ';')*
	//;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//Statement:
	//    Assignment |
	//    Decision |
	//    'for'  '[' var+=Variable  '='  exp+=Expression  'to' exp+=Expression  ']' statement+=Statement |
	//    'if' '(' exp+=Expression ')'  statement+=Statement  ( 'else'  statement+=Statement )? |
	//    'assume' '(' Expression ')' |
	//    'assert' '(' Expression ')' |
	//    '{' StatementList '}'
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Assignment:
	//    var+=Variable '=' exp+=Expression
	//;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Variable:
	//    NormalVariable|ArrayVariable
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//NormalVariable:
	//    name=ID
	//;
	public NormalVariableElements getNormalVariableAccess() {
		return pNormalVariable;
	}
	
	public ParserRule getNormalVariableRule() {
		return getNormalVariableAccess().getRule();
	}
	
	//ArrayVariable:
	//    name=ID '['exp+=Expression']'
	//;
	public ArrayVariableElements getArrayVariableAccess() {
		return pArrayVariable;
	}
	
	public ParserRule getArrayVariableRule() {
		return getArrayVariableAccess().getRule();
	}
	
	//Decision:
	//    'DECIDE' '(' Expression ')'
	//;
	public DecisionElements getDecisionAccess() {
		return pDecision;
	}
	
	public ParserRule getDecisionRule() {
		return getDecisionAccess().getRule();
	}
	
	//Expression:
	//    exp+=ConjunctiveExpression ('||' exp+=ConjunctiveExpression)*
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ConjunctiveExpression:
	//    exp+=EqualityExpression ('&&' exp+=EqualityExpression)*
	//;
	public ConjunctiveExpressionElements getConjunctiveExpressionAccess() {
		return pConjunctiveExpression;
	}
	
	public ParserRule getConjunctiveExpressionRule() {
		return getConjunctiveExpressionAccess().getRule();
	}
	
	//EqualityExpression:
	//    exp+=RelationalExpression (('=='|'!=') exp+=RelationalExpression)?
	//;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//RelationalExpression:
	//    exp+=SimpleExpression (('<'|'<='|'>'|'>=') exp+=SimpleExpression)?
	//;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//SimpleExpression:
	//    term+=Term (('+'|'-') term+=Term)*
	//;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//Term:
	//    factor+=Factor (('*'|'/') factor+=Factor)*
	//;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor:
	//    Variable|
	//    {Factor} CONSTANT|
	//    {Factor} 'isCoord'|
	//    {Factor} 'Coord'|
	//     ('rcv' '[' exp+=Expression ']''.'var+=Variable)|
	//    '('exp+=Expression')'
	//;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//SIMPLE_CONSTANT:
	//    '?' | 'false' | 'true' |'EMPTY' | 'pid' | NUMBER
	//;
	public SIMPLE_CONSTANTElements getSIMPLE_CONSTANTAccess() {
		return pSIMPLE_CONSTANT;
	}
	
	public ParserRule getSIMPLE_CONSTANTRule() {
		return getSIMPLE_CONSTANTAccess().getRule();
	}
	
	//INITIAL_CONST:
	//    SIMPLE_CONSTANT|'Vp'
	//;
	public INITIAL_CONSTElements getINITIAL_CONSTAccess() {
		return pINITIAL_CONST;
	}
	
	public ParserRule getINITIAL_CONSTRule() {
		return getINITIAL_CONSTAccess().getRule();
	}
	
	//CONSTANT:
	//    'N' | 'T' |  'E' |  'a'| 'SIZE' |  'SSIZE' | 'ASIZE' | 'NULL' |  'phase' | 'DECISION' |SIMPLE_CONSTANT
	//;
	public CONSTANTElements getCONSTANTAccess() {
		return pCONSTANT;
	}
	
	public ParserRule getCONSTANTRule() {
		return getCONSTANTAccess().getRule();
	}
	
	//terminal NUMBER:
	//    '0'|('1'..'9')('0'..'9')*
	//;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//Type:
	//    'V' | "V\'" | 'TS' | 'VArray' | 'TSArray' |'bool' | 'int' | 'intArray'
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
