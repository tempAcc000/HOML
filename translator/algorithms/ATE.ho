Algorithm ATE;
Variable
	V x = Vp;
	hidden V tmpX;
	hidden VArray sortedX;
	hidden intArray cntX;
	hidden int i, j, maxcnt;
Domain{
	assert(N>E);
	assert(T>=2*(N+2*a-E));
	assert(a>=0&&a<=N);
	assert(ASIZE<=a);
};
Round {
	SendPart
		send(<x>, All);
	TransitionPart
		for [ i = 1 to N ] {
				sortedX[i] = rcv[i].x;
				cntX[i]=1;
			};
		for [ i = 1 to N - 1 ] {
			for [ j = 1 to N - i ] {
				if ( sortedX[j] == NULL || (sortedX[j+1]!= NULL && sortedX[j]>sortedX[j+1]) ) {
					tmpX = sortedX[j];
					sortedX[j] = sortedX[j+1];
					sortedX[j+1] = tmpX;
				};
			};
		};
		tmpX=sortedX[1];
		maxcnt=1;
		for[ i= 2 to N ] {
			if( sortedX[i]!= NULL && sortedX[i]==sortedX[i-1]) {
				cntX[i]=cntX[i-1]+1;
				if(cntX[i]>maxcnt){
					maxcnt=cntX[i];
					tmpX=sortedX[i];
				};
			};
		};
		if(SIZE>T&&tmpX!=NULL){
			x=tmpX;
		};
		if(maxcnt>E&&tmpX!=NULL){
			DECIDE(tmpX);
		};
};

Univalence {
	for [ i = 1 to N ] {
			sortedX[i] = x[i];
		};
	j = 1;
	for [ i = 1 to N - 1 ] {
		if(sortedX[i+1] == v){
			tmpX = sortedX[j];
			sortedX[j] = sortedX[i];
			sortedX[i] = tmpX;
			j = j + 1 ;
		};
	};
	for [ i = 1 to N ]{
		assert( sortedX[i]==v || (i>E+1&&i>T+1) );
	};
};

